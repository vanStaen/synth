{"version":3,"sources":["component/keyboard/Keyboard.tsx","helper/noteToFrequency.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Notes","noteToFreqConvertionTable","C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B","noteToFrequency","note","octave","Keyboard","playNoteHandler","useEffect","listener","e","key","Csharp","Dsharp","Fsharp","Gsharp","Asharp","document","addEventListener","removeEventListener","className","onClick","App","useState","volume","fitlerFreq","audioContext","AudioContext","buffer","createBuffer","sampleRate","primaryGainControl","createGain","gain","setValueAtTime","connect","destination","primaryfilter","createBiquadFilter","type","frequency","value","channelData","getChannelData","i","length","Math","random","resume","whiteNoiseSource","createBufferSource","start","freq","sinOscillator","createOscillator","stop","currentTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6KAIYA,E,sDCONC,G,MAAiE,CACrEC,EAAG,CAAC,MAAO,KAAM,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,MACxDC,GAAI,CAAC,MAAO,MAAO,KAAM,OAAQ,OAAQ,OAAQ,QAAS,SAC1DC,EAAG,CAAC,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,QAAS,SAC1DC,GAAI,CAAC,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,QAAS,SAC3DC,EAAG,CAAC,KAAM,KAAM,MAAO,OAAQ,OAAQ,OAAQ,QAAS,SACxDC,EAAG,CAAC,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,QAAS,SAC1DC,GAAI,CAAC,MAAO,MAAO,KAAM,IAAO,OAAQ,OAAQ,QAAS,SACzDC,EAAG,CAAC,KAAM,GAAM,GAAM,IAAO,IAAO,OAAQ,QAAS,SACrDC,GAAI,CAAC,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,QAAS,SAC3DC,EAAG,CAAC,KAAM,GAAM,IAAO,IAAO,IAAO,IAAO,KAAQ,MACpDC,GAAI,CAAC,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,SAC5DC,EAAG,CAAC,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,WAG9C,SAASC,EAAgBC,EAAcC,GAEpD,OADkBf,EAA0Bc,GAAMC,I,SDvBxChB,K,WAAAA,E,MAAAA,E,YAAAA,E,WAAAA,E,MAAAA,E,MAAAA,E,YAAAA,E,WAAAA,E,MAAAA,E,YAAAA,E,WAAAA,E,MAAAA,E,MAAAA,E,YAAAA,E,WAAAA,E,MAAAA,E,aAAAA,M,KAyBZ,IA6HeiB,EA7HE,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,gBAAiBF,EAA4B,EAA5BA,OAyDnC,OAFAG,qBArDuB,WACrB,IAAIC,EAAW,SAACC,GAEd,OAAQA,EAAEC,KACR,IAAK,IACHJ,EAAgBJ,EAAgBd,EAAME,EAAGc,IACzC,MACF,IAAK,IACHE,EAAgBJ,EAAgBd,EAAMuB,OAAQP,IAC9C,MACF,IAAK,IACHE,EAAgBJ,EAAgBd,EAAMI,EAAGY,IACzC,MACF,IAAK,IACHE,EAAgBJ,EAAgBd,EAAMwB,OAAQR,IAC9C,MACF,IAAK,IACHE,EAAgBJ,EAAgBd,EAAMM,EAAGU,IACzC,MACF,IAAK,IACHE,EAAgBJ,EAAgBd,EAAMO,EAAGS,IACzC,MACF,IAAK,IACHE,EAAgBJ,EAAgBd,EAAMyB,OAAQT,IAC9C,MACF,IAAK,IACHE,EAAgBJ,EAAgBd,EAAMS,EAAGO,IACzC,MACF,IAAK,IACHE,EAAgBJ,EAAgBd,EAAM0B,OAAQV,IAC9C,MACF,IAAK,IACHE,EAAgBJ,EAAgBd,EAAMW,EAAGK,IACzC,MACF,IAAK,IACHE,EAAgBJ,EAAgBd,EAAM2B,OAAQX,IAC9C,MACF,IAAK,IACHE,EAAgBJ,EAAgBd,EAAMa,EAAGG,MAU/C,OAHAY,SAASC,iBAAiB,WAAYT,GAG/B,WACLQ,SAASE,oBAAoB,WAAYV,OAO3C,8BACE,qBAAIW,UAAU,MAAd,UACE,oBAEEA,UAAU,UACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAME,EAAGc,MAFpD,KAIN,oBAEEe,UAAU,WACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAMuB,OAAQP,MAFzD,MAIN,oBAEEe,UAAU,UACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAMI,EAAGY,MAFpD,KAIN,oBAEEe,UAAU,WACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAMwB,OAAQR,MAFzD,MAIN,oBAEEe,UAAU,UACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAMM,EAAGU,MAFpD,KAIN,oBAEEe,UAAU,UACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAMO,EAAGS,MAFpD,KAIN,oBAEEe,UAAU,WACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAMyB,OAAQT,MAFzD,MAIN,oBAEEe,UAAU,UACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAMS,EAAGO,MAFpD,KAIN,oBAEEe,UAAU,WACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAM0B,OAAQV,MAFzD,MAIN,oBAEEe,UAAU,UACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAMW,EAAGK,MAFpD,KAIN,oBAEEe,UAAU,WACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAM2B,OAAQX,MAFzD,MAIN,oBAEEe,UAAU,UACVC,QAAS,kBAAMd,EAAgBJ,EAAgBd,EAAMa,EAAGG,MAFpD,WEhECiB,G,MA5EH,WAAO,IAAD,EAEYC,mBAAS,GAFrB,mBAETlB,EAFS,aAGYkB,mBAAS,MAHrB,mBAGTC,EAHS,aAIoBD,mBAAS,MAJ7B,mBAITE,EAJS,KAMVC,GANU,KAMK,IAAIC,cAGnBC,EAASF,EAAaG,aAC1B,EAC0B,EAA1BH,EAAaI,WACbJ,EAAaI,YAITC,EAAoBL,EAAaM,aACvCD,EAAmBE,KAAKC,eAAeV,EAAQ,GAC/CO,EAAmBI,QAAQT,EAAaU,aAIxC,IAAMC,EAAgBX,EAAaY,qBACnCD,EAAcE,KAAO,UACrBF,EAAcG,UAAUC,MAAQhB,EAChCY,EAAcF,QAAQJ,GAsCtB,OACE,qBAAKX,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sCAGA,wBAAQC,QAzCgB,WAM1B,IAHA,IAAMqB,EAAcd,EAAOe,eAAe,GAGjCC,EAAI,EAAGA,EAAIhB,EAAOiB,OAAOD,IAChCF,EAAYE,GAAqB,EAAhBE,KAAKC,SAAe,EAGvCrB,EAAasB,SAEb,IAAMC,EAAmBvB,EAAawB,qBACtCD,EAAiBrB,OAASA,EAE1BqB,EAAiBd,QAAQE,GACzBY,EAAiBE,SAyBf,yBACA,cAAC,EAAD,CAAU5C,gBAtBQ,SAAC6C,GAGvB1B,EAAasB,SAGb,IAAMK,EAAgB3B,EAAa4B,mBACnCD,EAAcb,UAAUN,eAAekB,EAAM,GAG7CC,EAAclB,QAAQE,GACtBgB,EAAcF,QACdE,EAAcE,KAAK7B,EAAa8B,YAAc,KAUEnD,OAAQA,WC7D7CoD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnD,SAASoD,eAAe,SAM1BZ,M","file":"static/js/main.69ae30d2.chunk.js","sourcesContent":["import \"./Keyboard.css\";\nimport noteToFrequency from \"../../helper/noteToFrequency\";\nimport { useEffect } from \"react\";\n\nexport enum Notes {\n  \"Aflat\" = \"Ab\",\n  \"A\" = \"A\",\n  \"Asharp\" = \"Bb\",\n  \"Bflat\" = \"Bb\",\n  \"B\" = \"B\",\n  \"C\" = \"C\",\n  \"Csharp\" = \"Db\",\n  \"Dflat\" = \"Db\",\n  \"D\" = \"D\",\n  \"Dsharp\" = \"Eb\",\n  \"Eflat\" = \"Eb\",\n  \"E\" = \"E\",\n  \"F\" = \"F\",\n  \"Fsharp\" = \"Gb\",\n  \"Gflat\" = \"Gb\",\n  \"G\" = \"G\",\n  \"Gsharp\" = \"Ab\",\n}\n\ntype KeyboardProps = {\n  playNoteHandler: (freq: number) => void;\n  octave: number;\n};\n\nconst Keyboard = ({ playNoteHandler, octave }: KeyboardProps) => {\n    \n  const handleKeyPress = () => {\n    let listener = (e: any) => {\n\n      switch (e.key) {\n        case \"a\":\n          playNoteHandler(noteToFrequency(Notes.C, octave));\n          break;\n        case \"w\":\n          playNoteHandler(noteToFrequency(Notes.Csharp, octave));\n          break;\n        case \"s\":\n          playNoteHandler(noteToFrequency(Notes.D, octave));\n          break;\n        case \"e\":\n          playNoteHandler(noteToFrequency(Notes.Dsharp, octave));\n          break;\n        case \"d\":\n          playNoteHandler(noteToFrequency(Notes.E, octave));\n          break;\n        case \"f\":\n          playNoteHandler(noteToFrequency(Notes.F, octave));\n          break;\n        case \"t\":\n          playNoteHandler(noteToFrequency(Notes.Fsharp, octave));\n          break;\n        case \"g\":\n          playNoteHandler(noteToFrequency(Notes.G, octave));\n          break;\n        case \"z\":\n          playNoteHandler(noteToFrequency(Notes.Gsharp, octave));\n          break;\n        case \"h\":\n          playNoteHandler(noteToFrequency(Notes.A, octave));\n          break;\n        case \"u\":\n          playNoteHandler(noteToFrequency(Notes.Asharp, octave));\n          break;\n        case \"j\":\n          playNoteHandler(noteToFrequency(Notes.B, octave));\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener(\"keypress\", listener);\n\n    // cleanup function\n    return () => {\n      document.removeEventListener(\"keypress\", listener);\n    };\n  };\n\n  useEffect(handleKeyPress);\n\n  return (\n    <div>\n      <ul className=\"set\">\n        <li\n          key=\"C\"\n          className=\"white e\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.C, octave))}\n        ></li>\n        <li\n          key=\"C#\"\n          className=\"black ds\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.Csharp, octave))}\n        ></li>\n        <li\n          key=\"D\"\n          className=\"white d\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.D, octave))}\n        ></li>\n        <li\n          key=\"D#\"\n          className=\"black cs\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.Dsharp, octave))}\n        ></li>\n        <li\n          key=\"E\"\n          className=\"white c\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.E, octave))}\n        ></li>\n        <li\n          key=\"F\"\n          className=\"white b\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.F, octave))}\n        ></li>\n        <li\n          key=\"F#\"\n          className=\"black as\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.Fsharp, octave))}\n        ></li>\n        <li\n          key=\"G\"\n          className=\"white a\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.G, octave))}\n        ></li>\n        <li\n          key=\"G#\"\n          className=\"black gs\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.Gsharp, octave))}\n        ></li>\n        <li\n          key=\"A\"\n          className=\"white g\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.A, octave))}\n        ></li>\n        <li\n          key=\"A#\"\n          className=\"black fs\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.Asharp, octave))}\n        ></li>\n        <li\n          key=\"B\"\n          className=\"white f\"\n          onClick={() => playNoteHandler(noteToFrequency(Notes.B, octave))}\n        ></li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Keyboard;\n","type notesInAnOctave = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number\n];\n\nconst noteToFreqConvertionTable: { [note: string]: notesInAnOctave } = {\n  C: [16.35, 32.7, 65.41, 130.81, 261.63, 523.25, 1046.5, 2093.0],\n  Db: [17.32, 34.65, 69.3, 138.59, 277.18, 554.37, 1108.73, 2217.46],\n  D: [18.35, 36.71, 73.42, 146.83, 293.66, 587.33, 1174.66, 2349.32],\n  Eb: [19.45, 38.89, 77.78, 155.56, 311.13, 622.25, 1244.51, 2489.02],\n  E: [20.6, 41.2, 82.41, 164.81, 329.63, 659.26, 1318.51, 2637.02],\n  F: [21.83, 43.65, 87.31, 174.61, 349.23, 698.46, 1396.91, 2793.83],\n  Gb: [23.12, 46.25, 92.5, 185.0, 369.99, 739.99, 1479.98, 2959.96],\n  G: [24.5, 49.0, 98.0, 196.0, 392.0, 783.99, 1567.98, 3135.96],\n  Ab: [25.96, 51.91, 103.83, 207.65, 415.3, 830.61, 1661.22, 3322.44],\n  A: [27.5, 55.0, 110.0, 220.0, 440.0, 880.0, 1760.0, 3520.0],\n  Bb: [29.14, 58.27, 116.54, 233.08, 466.16, 932.33, 1864.66, 3729.31],\n  B: [30.87, 61.74, 123.47, 246.94, 493.88, 987.77, 1975.53, 3951.07],\n};\n\nexport default function noteToFrequency(note: string, octave: number) {\n  const frequency = noteToFreqConvertionTable[note][octave];\n  return frequency;\n}\n","import { useState } from 'react';\nimport Keyboard from './component/keyboard/Keyboard';\n\nimport './App.css';\n\nconst App = () => {\n\n  const [octave, setOctave] = useState(4);\n  const [volume, setVolume] = useState(0.05);\n  const [fitlerFreq, setFitlerFreq] = useState(5000);  \n\n  const audioContext = new AudioContext();\n\n  // First paramter = number of chanel (1 for mono, 2 for duo <-> Stero or polyphony)\n  const buffer = audioContext.createBuffer(\n    1,\n    audioContext.sampleRate * 1,\n    audioContext.sampleRate,\n  )\n\n  // Create a Gain control (Master Volume)\n  const primaryGainControl= audioContext.createGain();\n  primaryGainControl.gain.setValueAtTime(volume, 0);\n  primaryGainControl.connect(audioContext.destination);\n\n\n  // Create a filter (LP)\n  const primaryfilter = audioContext.createBiquadFilter();\n  primaryfilter.type = \"lowpass\";\n  primaryfilter.frequency.value = fitlerFreq;\n  primaryfilter.connect(primaryGainControl);\n\n\n  const playWhiteNoiseHandler = () => {   \n\n      // Represente 1 second of audio. \n      const channelData = buffer.getChannelData(0);\n\n      // Create white noise by assigning random value between -1 and 1\n      for (let i = 0; i < buffer.length;i++) {\n        channelData[i] = Math.random() * 2 - 1;\n      }  \n      //Resume audioContext when clicking button\n      audioContext.resume();\n      //Create a Buffer Source\n      const whiteNoiseSource = audioContext.createBufferSource();\n      whiteNoiseSource.buffer = buffer;\n      //Link Audio Source to Gain control\n      whiteNoiseSource.connect(primaryfilter);\n      whiteNoiseSource.start();\n\n  }\n\n  const playNoteHandler = (freq: number) => {   \n\n    // Resume audioContext when clicking button\n    audioContext.resume();\n\n    // Create a Buffer Source\n    const sinOscillator = audioContext.createOscillator();\n    sinOscillator.frequency.setValueAtTime(freq, 0); // Here convert to note\n\n    // Link Audio Source to Gain control\n    sinOscillator.connect(primaryfilter);\n    sinOscillator.start();\n    sinOscillator.stop(audioContext.currentTime + 0.2); // will play for one second.\n}\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Synth \n        </p>\n        <button onClick={playWhiteNoiseHandler}>White Noise</button>\n        <Keyboard playNoteHandler={playNoteHandler} octave={octave}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}