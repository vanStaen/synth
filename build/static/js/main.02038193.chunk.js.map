{"version":3,"sources":["helper/noteToFrequency.ts","store/createAllNotes.ts","store/store.tsx","logos/knob.svg","component/knob/Knob.tsx","helper/valueToDegree.ts","component/slider/Slider.tsx","component/presetDropDown/PresetDropDown.tsx","component/controlGrid/ControlGrid.tsx","component/keyboard/useKeyboard.ts","component/keyboard/Keyboard.tsx","useAppState.ts","App.tsx","index.tsx"],"names":["noteToFreqConversionTable","C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B","noteToFrequency","note","octave","listOfNotes","createNote","store","noteProps","freq","name","audioContext","sineGain","primaryFilter","squareGain","noiseGain","sineNoteGain","createGain","gain","setValueAtTime","connect","squareNoteGain","noiseNoteGain","sineOsc","createOscillator","frequency","type","start","squareOsc","buffer","createBuffer","sampleRate","channelData","getChannelData","i","length","Math","random","resume","noise","createBufferSource","loop","addNote","noteStore","notes","makeObservable","this","observable","action","noteConfig","forEach","noteToCreate","createAllNotes","push","Knob","props","value","min","max","multiply","dispatch","title","unit","color","useState","showValue","setShowValue","knobValue","setKnobValue","originalClientY","setOriginalClientY","mouseIsDown","setMouseIsDown","useEffect","document","getElementById","setAttribute","knobRotation","minValue","maxValue","startDegree","maxRotation","valueToDegree","style","setProperty","mouseDownHandler","useCallback","event","window","addEventListener","mouseUpHandler","clientY","removeEventListener","mouseLeaveHandler","mouseMoveHandler","newClientY","movedInPixel","movedInDegree","newValue","round","className","onMouseEnter","onMouseLeave","src","knob","id","onMouseDown","onMouseMove","filter","Slider","step","defaultValue","onChange","console","log","htmlFor","PresetDropDown","ControlGrid","state","Grid","container","spacing","item","xs","mainVolume","noiseVolume","sineVolume","squareVolume","filterFreq","keyboardToNote","toggleClass","keyPressed","addClass","element","includes","classList","toggle","keys","Keyboard","playNoteHandler","stopNoteHandler","innerWidth","setWindowWidth","handleWindowsResize","keyDownHandler","e","key","toLowerCase","keyUpHandler","useKeyboard","map","onMouseUp","reducer","Error","App","useReducer","useMemo","AudioContext","visualizer","createAnalyser","primaryGainControl","destination","createBiquadFilter","currentTime","noteArray","find","exponentialRampToValueAtTime","ReactDOM","render","StrictMode"],"mappings":"uUAWaA,EAAiE,CAC5EC,EAAG,CAAC,MAAO,KAAM,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,MACxDC,GAAI,CAAC,MAAO,MAAO,KAAM,OAAQ,OAAQ,OAAQ,QAAS,SAC1DC,EAAG,CAAC,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,QAAS,SAC1DC,GAAI,CAAC,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,QAAS,SAC3DC,EAAG,CAAC,KAAM,KAAM,MAAO,OAAQ,OAAQ,OAAQ,QAAS,SACxDC,EAAG,CAAC,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,QAAS,SAC1DC,GAAI,CAAC,MAAO,MAAO,KAAM,IAAO,OAAQ,OAAQ,QAAS,SACzDC,EAAG,CAAC,KAAM,GAAM,GAAM,IAAO,IAAO,OAAQ,QAAS,SACrDC,GAAI,CAAC,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,QAAS,SAC3DC,EAAG,CAAC,KAAM,GAAM,IAAO,IAAO,IAAO,IAAO,KAAQ,MACpDC,GAAI,CAAC,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,SAC5DC,EAAG,CAAC,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,UAGtD,SAASC,EAAgBC,EAAcC,GAC5C,OAAOf,EAA0Bc,GAAMC,EAAS,GCxB3C,IAAMC,EAAwB,CACjC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAyCzD,IAAMC,EAAa,SAACC,EAAkBC,GAA0B,IAC3DC,EAA6ED,EAA7EC,KAAMC,EAAuEF,EAAvEE,KAAMC,EAAiEH,EAAjEG,aAA6BC,GAAoCJ,EAAnDK,cAAmDL,EAApCI,UAAUE,EAA0BN,EAA1BM,WAAYC,EAAcP,EAAdO,UAGjEC,EAAeL,EAAaM,aAClCD,EAAaE,KAAKC,eAAe,EAAG,GACpCH,EAAaI,QAAQR,GACrB,IAAMS,EAAiBV,EAAaM,aACpCI,EAAeH,KAAKC,eAAe,EAAG,GACtCE,EAAeD,QAAQN,GACvB,IAAMQ,EAAgBX,EAAaM,aACnCK,EAAcJ,KAAKC,eAAe,EAAG,GACrCG,EAAcF,QAAQL,GAGtB,IAAMQ,EAAUZ,EAAaa,mBAC7BD,EAAQE,UAAUN,eAAeV,EAAM,GACvCc,EAAQG,KAAO,OACfH,EAAQH,QAAQJ,GAChBO,EAAQI,QAGR,IAAMC,EAAYjB,EAAaa,mBAC/BI,EAAUH,UAAUN,eAAeV,EAAM,GACzCmB,EAAUF,KAAO,SACjBE,EAAUR,QAAQC,GAClBO,EAAUD,QAUV,IAPA,IACME,EAASlB,EAAamB,aADX,IAGfnB,EAAaoB,WACbpB,EAAaoB,YAETC,EAAcH,EAAOI,eAAe,GACjCC,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,IAC/BF,EAAYE,GAAqB,EAAhBE,KAAKC,SAAe,EAEzC1B,EAAa2B,SACb,IAAMC,EAAQ5B,EAAa6B,qBAC3BD,EAAMV,OAASA,EACfU,EAAMnB,QAAQE,GACdiB,EAAME,MAAO,EACbF,EAAMZ,QAGNpB,EAAMmC,QACJjC,EACAC,EACAM,EACAO,EACAF,EACAO,EACAN,EACAiB,IC9COI,EAAY,IAxCzB,WAII,aAAe,yBAFfC,MAAoB,GAGhBC,YAAeC,KAAM,CACjBF,MAAOG,IACPL,QAASM,MAPrB,kDAWI,SAAeC,IDVZ,SAAwB1C,EAAkB0C,GAAyB,IAC9DtC,EAAiEsC,EAAjEtC,aAAcE,EAAmDoC,EAAnDpC,cAAeD,EAAoCqC,EAApCrC,SAAUE,EAA0BmC,EAA1BnC,WAAYC,EAAckC,EAAdlC,UAE3DV,EAAY6C,SAAQ,SAACC,GACjB,IAAI/C,EACJ,IAAKA,EAAS,EAAGA,EAAS,EAAGA,IACzBE,EAAWC,EAAO,CACdE,KAAMP,EAAgBiD,EAAc/C,GACpCM,KAAK,GAAD,OAAKyC,GAAL,OAAoB/C,GACxBO,eACAE,gBACAD,WACAE,aACAC,iBCFRqC,CAAeN,KAAMG,KAZ7B,qBAeI,SACIxC,EACAC,EACAM,EACAO,EACAF,EACAO,EACAN,EACAiB,GAEA,IAAMpC,EAAiB,CACnBM,KAAMA,EACNC,KAAMA,EACNM,aAAcA,EACdO,QAASA,EACTF,eAAgBA,EAChBO,UAAWA,EACXN,cAAeA,EACfiB,MAAOA,GAGXO,KAAKF,MAAMS,KAAKlD,OApCxB,M,QCde,UAA0B,iC,eC6G1BmD,EAzFF,SAACC,GAAsB,IAC1BC,EAAkED,EAAlEC,MAAO9C,EAA2D6C,EAA3D7C,KAAM+C,EAAqDF,EAArDE,IAAKC,EAAgDH,EAAhDG,IAAKC,EAA2CJ,EAA3CI,SAAUC,EAAiCL,EAAjCK,SAAUC,EAAuBN,EAAvBM,MAAOC,EAAgBP,EAAhBO,KAAMC,EAAUR,EAAVQ,MAD/B,EAGCC,oBAAS,GAHV,mBAG1BC,EAH0B,KAGfC,EAHe,OAICF,mBAASR,GAJV,mBAI1BW,EAJ0B,KAIfC,EAJe,OAKaJ,mBAAS,GALtB,mBAK1BK,EAL0B,KAKTC,EALS,OAMKN,oBAAS,GANd,mBAM1BO,EAN0B,KAMbC,EANa,KAQjCC,qBAAU,WACRC,SAASC,eAAed,GAAQe,aAAa,YAAa,SAC1DR,EAAaD,EAAYR,GACzB,IAAMkB,EC9BH,SACLrB,EACAsB,EACAC,EACAC,EACAC,GAEA,OAAUzB,EAAQyB,GAAgBF,EAAWD,GAAaE,EDuBnCE,CAAcf,EAAWV,EAAKC,GAAM,GAAI,KAC7DgB,SACGC,eAAed,GACfsB,MAAMC,YAAY,YAFrB,iBAE4CP,EAF5C,WAGC,CAAChB,EAAOO,EAAcT,EAAUF,EAAKC,IAExC,IAAM2B,EAAmBC,uBACvB,SAACC,GACCC,OAAOC,iBAAiB,UAAUC,GAClCpB,EAAmBiB,EAAMI,SACzBnB,GAAe,KAEjB,CAACF,EAAoBE,IAGjBkB,EAAiBJ,uBAAY,WACjCE,OAAOI,oBAAoB,UAAUF,GACrCpB,EAAmB,GACnBE,GAAe,KACd,CAACF,EAAoBE,IAElBqB,EAAoBP,uBAAY,WAC/Bf,GACHD,EAAmB,KAEpB,CAACC,EAAaD,IAEXwB,EAAmBR,uBACvB,SAACC,GACC,GAAwB,IAApBlB,GAAyBE,EAAa,CACxC,IAAMwB,EAAaR,EAAMI,QACrBK,EAAe3B,EAAkB0B,EAAa,GAC9CC,EAAe,MACjBA,EAAe,KAEbA,EAAe,IACjBA,EAAe,GAEjB,IAAMC,EAA+B,IAAfD,EAAqB,GACrCE,GAA6CxC,EAALD,IAAfwC,IAA0B,IAAI,IAE7DvB,SACGC,eAAed,GACfsB,MAAMC,YAAY,YAFrB,iBAE4Ca,EAF5C,SAGArC,EAAS,CAAElC,KAAMhB,EAAM8C,MAAO0C,IAC9B9B,EAAahC,KAAK+D,MAAMD,EAAWvC,OAGvC,CAACU,EAAiBE,EAAad,EAAKC,EAAKC,EAAUE,EAAOD,IAG5D,OACE,sBACEwC,UAAU,OACVC,aAAc,kBAAMnC,GAAa,IACjCoC,aAAc,kBAAMpC,GAAa,IAHnC,UAKE,qBACEqC,IAAKC,EACLC,GAAI5C,EACJuC,UAAU,cACVM,YAAarB,EACbsB,YAAab,EACbQ,aAAcT,EACdV,MAAQpB,EAAQ,CAAE6C,OAAQ,iCAAmC,KAE9D3C,EACC,uBAAMmC,UAAU,cAAhB,UACGjC,EACAL,KAGD,sBAAMsC,UAAU,aAAhB,SAA8BvC,QE1EzBgD,G,MAzBA,WAAO,IAAD,EACO7C,mBAAS,GADhB,6BAOnB,OACE,sBAAKoC,UAAU,SAAf,UACE,uBACEA,UAAU,gBACV1E,KAAK,QACL+E,GAAG,SACH/F,KAAK,SACL+C,IAAI,IACJC,IAAI,IACJoD,KAAK,IACLC,aAAa,IACbC,SAfgB,SAACzB,GACrB0B,QAAQC,IAAI3B,MAgBV,uBAAO4B,QAAQ,SAASf,UAAU,gBAAlC,gCCDSgB,G,MApBQ,WAAO,IAAD,EACDpD,mBAAS,GADR,6BAO3B,OACE,sBAAKoC,UAAU,SAAf,UACE,yBAAQ1F,KAAK,SAAS+F,GAAG,SAASL,UAAU,mBAA5C,UACE,wBAAQ5C,MAAM,IAAd,0BACA,wBAAQA,MAAM,IAAd,wBACA,wBAAQA,MAAM,IAAd,wBACA,wBAAQA,MAAM,IAAd,+BAEF,uBAAO2D,QAAQ,UAAUf,UAAU,gBAAnC,kCCiHSiB,G,MArHK,SAAC9D,GAA6B,IACxCK,EAAoBL,EAApBK,SAAU0D,EAAU/D,EAAV+D,MAElB,OACE,qBAAKlB,UAAU,yBAAf,SACE,eAACmB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,sBAAKvB,UAAU,wBAAf,UACE,cAAC,EAAD,CACE5C,MAAO8D,EAAMM,WACblH,KAAK,aACLkD,SAAUA,EACVC,MAAM,MACNJ,IAAK,EACLC,IAAK,GACLC,SAAU,IACVG,KAAK,MAEP,cAAC,EAAD,CACEN,MAAO8D,EAAMO,YACbnH,KAAK,cACLkD,SAAUA,EACVC,MAAM,QACNJ,IAAK,IACLC,IAAK,EACLC,SAAU,IACVG,KAAK,MAEP,cAAC,EAAD,CACEN,MAAO8D,EAAMQ,WACbpH,KAAK,aACLkD,SAAUA,EACVC,MAAM,MACNJ,IAAK,IACLC,IAAK,EACLC,SAAU,IACVG,KAAK,MAEP,cAAC,EAAD,CACEN,MAAO8D,EAAMS,aACbrH,KAAK,eACLkD,SAAUA,EACVC,MAAM,SACNJ,IAAK,IACLC,IAAK,GACLC,SAAU,IACVG,KAAK,MAEP,cAAC,EAAD,CACEN,MAAO8D,EAAMU,WACbtH,KAAK,aACLkD,SAAUA,EACVC,MAAM,SACNJ,IAAK,GACLC,IAAK,IACLC,SAAU,EACVG,KAAK,KACLC,OAAO,SAKb,cAACwD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,sBAAKvB,UAAU,wBAAf,UACE,cAAC,EAAD,CACE5C,MAAO8D,EAAMM,WACblH,KAAK,aACLkD,SAAUA,EACVC,MAAM,SACNJ,IAAK,EACLC,IAAK,GACLC,SAAU,IACVG,KAAK,MAEP,cAAC,EAAD,CACEN,MAAO8D,EAAMO,YACbnH,KAAK,cACLkD,SAAUA,EACVC,MAAM,QACNJ,IAAK,IACLC,IAAK,EACLC,SAAU,IACVG,KAAK,MAEP,cAAC,EAAD,CACEN,MAAO8D,EAAMQ,WACbpH,KAAK,aACLkD,SAAUA,EACVC,MAAM,UACNJ,IAAK,IACLC,IAAK,EACLC,SAAU,IACVG,KAAK,MAEP,cAAC,EAAD,CACEN,MAAO8D,EAAMS,aACbrH,KAAK,eACLkD,SAAUA,EACVC,MAAM,UACNJ,IAAK,IACLC,IAAK,GACLC,SAAU,IACVG,KAAK,WAIX,cAACyD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAAC,EAAD,MAEF,cAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAAE,EAAF,aCxHJM,G,MAA4C,CAChD,EAAK,IACL,EAAK,KACL,EAAK,IACL,EAAK,KACL,EAAK,IACL,EAAK,IACL,EAAK,KACL,EAAK,IACL,EAAK,KACL,EAAK,IACL,EAAK,KACL,EAAK,MAGP,SAASC,EAAYC,EAAoBC,GACvC,IAAMC,EAAU3D,SAASC,eAAesD,EAAeE,IACnDF,EAAeE,GAAYG,SAAS,KAC/B,OAAPD,QAAO,IAAPA,KAASE,UAAUC,OAAO,iBAAkBJ,GAErC,OAAPC,QAAO,IAAPA,KAASE,UAAUC,OAAO,iBAAkBJ,GCnBhD,IAAMK,EAAO,CACX,CAACtI,KAAM,IAAKiG,UAAW,WACvB,CAACjG,KAAM,KAAMiG,UAAW,YACxB,CAACjG,KAAM,IAAKiG,UAAW,WACvB,CAACjG,KAAM,KAAMiG,UAAW,YACxB,CAACjG,KAAM,IAAKiG,UAAW,WACvB,CAACjG,KAAM,IAAKiG,UAAW,WACvB,CAACjG,KAAM,KAAMiG,UAAW,YACxB,CAACjG,KAAM,IAAKiG,UAAW,WACvB,CAACjG,KAAM,KAAMiG,UAAW,YACxB,CAACjG,KAAM,IAAKiG,UAAW,WACvB,CAACjG,KAAM,KAAMiG,UAAW,YACxB,CAACjG,KAAM,IAAKiG,UAAW,YA6CVsC,EAnCE,SAACnF,GAA0B,IAClCoF,EAA6CpF,EAA7CoF,gBAAiBC,EAA4BrF,EAA5BqF,gBAAiBxI,EAAWmD,EAAXnD,OADD,EAEH4D,mBAASwB,OAAOqD,YAFb,mBAErBC,GAFqB,WAInCC,EAAsB,WAC1BD,EAAetD,OAAOqD,aAYxB,OATApE,qBAAU,WAER,OADAe,OAAOC,iBAAiB,SAAUsD,GAC3B,WACLvD,OAAOI,oBAAoB,SAAUmD,MAEtC,CAACD,IDZC,SAAqBvF,GAAuB,IACzCoF,EAA6CpF,EAA7CoF,gBAAiBC,EAA4BrF,EAA5BqF,gBAAiBxI,EAAWmD,EAAXnD,OAE1CqE,qBAAU,WACR,IAAMuE,EAAiB,SAACC,GACtB,IAAMd,EAAac,EAAEC,IAAIC,cACrBhB,KAAcF,IAChBC,EAAYC,GAAY,GACxBQ,EAAgBzI,EAAgB+H,EAAeE,GAAa/H,MAI1DgJ,EAAe,SAACH,GACpB,IAAMd,EAAac,EAAEC,IAAIC,cACrBhB,KAAcF,IAChBC,EAAYC,GAAY,GACxBS,EAAgB1I,EAAgB+H,EAAeE,GAAa/H,MAQhE,OAJAsE,SAASe,iBAAiB,UAAWuD,GACrCtE,SAASe,iBAAiB,QAAS2D,GAG5B,WACL1E,SAASkB,oBAAoB,UAAWoD,GACxCtE,SAASkB,oBAAoB,QAASwD,OCZ1CC,CAAY9F,GAGV,8BACE,oBAAI6C,UAAU,MAAd,SACGqC,EAAKa,KAAI,SAACJ,GAAD,OACR,oBACEzC,GAAIyC,EAAI/I,KAERiG,UAAW8C,EAAI9C,UACfM,YAAa,kBAAMiC,EAAgBzI,EAAgBgJ,EAAI/I,KAAMC,KAC7DmJ,UAAW,kBAAMX,EAAgB1I,EAAgBgJ,EAAI/I,KAAMC,KAC3DkG,aAAc,kBAAMsC,EAAgB1I,EAAgBgJ,EAAI/I,KAAMC,MAJzD8I,EAAI/I,c,OC5BrB,SAASqJ,EAAQlC,EAAYtE,GACzB,OAAQA,EAAOtB,MACX,IAAK,SACD,OAAO,2BAAK4F,GAAZ,IAAmBlH,OAAQ4C,EAAOQ,QACtC,IAAK,aACD,OAAO,2BAAK8D,GAAZ,IAAmBM,WAAY5E,EAAOQ,QAC1C,IAAK,cACD,OAAO,2BAAK8D,GAAZ,IAAmBO,YAAa7E,EAAOQ,QAC3C,IAAK,aACD,OAAO,2BAAK8D,GAAZ,IAAmBQ,WAAY9E,EAAOQ,QAC1C,IAAK,aACD,OAAO,2BAAK8D,GAAZ,IAAmBM,WAAY5E,EAAOQ,QAC1C,IAAK,aACD,OAAO,2BAAK8D,GAAZ,IAAmBU,WAAYhF,EAAOQ,QAC1C,QACI,MAAM,IAAIiG,O,UC0EPC,EAvGH,WAAO,IAAD,EDmCPC,qBAAWH,EADM,CAAEpJ,OAAQ,EAAGwH,WAAY,IAAMC,YAAa,EAAGC,WAAY,EAAGC,aAAc,EAAGC,WAAY,MClCrG,mBAETV,EAFS,KAEF1D,EAFE,OAI6EgG,mBAAQ,WACnG,IAAMjJ,EAAe,IAAIkJ,aACnBC,EAAanJ,EAAaoJ,iBAG1BC,EAAqBrJ,EAAaM,aACxC+I,EAAmB9I,KAAKC,eAAemG,EAAMM,WAAY,GACzDoC,EAAmB5I,QAAQT,EAAasJ,aAGxC,IAAMpJ,EAAgBF,EAAauJ,qBACnCrJ,EAAca,KAAO,UACrBb,EAAcY,UAAU+B,MAAQ8D,EAAMU,WACtCnH,EAAcO,QAAQ4I,GAGtB,IAAMpJ,EAAWD,EAAaM,aAC9BL,EAASM,KAAKC,eAAemG,EAAMQ,WAAY,GAC/ClH,EAASQ,QAAQP,GAGjB,IAAMC,EAAaH,EAAaM,aAChCH,EAAWI,KAAKC,eAAemG,EAAMS,aAAc,GACnDjH,EAAWM,QAAQP,GAGnB,IAAME,EAAYJ,EAAaM,aAO/B,OANAF,EAAUG,KAAKC,eAAemG,EAAMO,YAAa,GACjD9G,EAAUK,QAAQP,GAGlB8B,EAAUS,eAAe,CAAEzC,eAAcE,gBAAeD,WAAUE,aAAYC,cAEvE,CAAEJ,eAAcmJ,aAAYjJ,gBAAemJ,qBAAoBpJ,WAAUE,aAAYC,eAC3F,IAlCKJ,EAJQ,EAIRA,aAAcE,EAJN,EAIMA,cAAemJ,EAJrB,EAIqBA,mBAAoBpJ,EAJzC,EAIyCA,SAAUE,EAJnD,EAImDA,WAAYC,EAJ/D,EAI+DA,UAoC/E0D,qBAAU,WAER5D,EAAcY,UAAU+B,MAAQpB,KAAK+D,MAAMmB,EAAMU,cAChD,CAACV,EAAMU,aAEVvD,qBAAU,WAERuF,EAAmB9I,KAAKC,eAAemG,EAAMM,WAAYjH,EAAawJ,eACrE,CAAC7C,EAAMM,aAEVnD,qBAAU,WAER7D,EAASM,KAAKC,eAAemG,EAAMQ,WAAYnH,EAAawJ,aAC5DrJ,EAAWI,KAAKC,eAAemG,EAAMS,aAAcpH,EAAawJ,aAChEpJ,EAAUG,KAAKC,eAAemG,EAAMO,YAAalH,EAAawJ,eAC7D,CAAC7C,EAAMQ,WAAYR,EAAMS,aAAcT,EAAMO,cAEhD,IAAMc,EAAkBrD,uBAAY,SAAC7E,GACnCE,EAAa2B,SACb,IAAM8H,EAAYzH,EAAUC,MAAMyH,MAAK,SAAAlK,GAAI,OAAIA,EAAKM,MAAQA,KACxD2J,IACmBA,EAAUpJ,aAClBE,KAAKC,eAAemG,EAAMQ,WAAYnH,EAAawJ,aACzCC,EAAU/I,eAClBH,KAAKC,eAAemG,EAAMS,aAAcpH,EAAawJ,aAC9CC,EAAU9I,cAClBJ,KAAKC,eAAemG,EAAMO,YAAalH,EAAawJ,gBAEnE,CAACxH,EAAUC,MAAOjC,IAEfiI,EAAkBtD,uBAAY,SAAC7E,GACnC,IAAM2J,EAAYzH,EAAUC,MAAMyH,MAAK,SAAAlK,GAAI,OAAIA,EAAKM,MAAQA,KAC5D,GAAI2J,EAAW,CACb,IAAMpJ,EAAeoJ,EAAUpJ,aAC/BA,EAAaE,KAAKC,eAAeH,EAAaE,KAAKsC,MAAO7C,EAAawJ,aACvEnJ,EAAaE,KAAKoJ,6BAA6B,KAAU3J,EAAawJ,YAAc,KACpF,IAAM9I,EAAiB+I,EAAU/I,eACjCA,EAAeH,KAAKC,eAAeE,EAAeH,KAAKsC,MAAO7C,EAAawJ,aAC3E9I,EAAeH,KAAKoJ,6BAA6B,KAAU3J,EAAawJ,YAAc,KACtF,IAAM7I,EAAgB8I,EAAU9I,cAChCA,EAAcJ,KAAKC,eAAeG,EAAcJ,KAAKsC,MAAO7C,EAAawJ,aACzE7I,EAAcJ,KAAKoJ,6BAA6B,KAAU3J,EAAawJ,YAAc,QAEtF,CAACxH,EAAUC,MAAOjC,IAErB,OACE,qBAAKyF,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKK,GAAG,iBACR,cAAC,EAAD,CACE7C,SAAUA,EACV0D,MAAOA,IAET,cAAC,EAAD,CACEqB,gBAAiBA,EACjBC,gBAAiBA,EACjBxI,OAAQkH,EAAMlH,eCnGxBmK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/F,SAASC,eAAe,W","file":"static/js/main.02038193.chunk.js","sourcesContent":["type notesInAnOctave = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number\n];\n\nexport const noteToFreqConversionTable: { [note: string]: notesInAnOctave } = {\n  C: [16.35, 32.7, 65.41, 130.81, 261.63, 523.25, 1046.5, 2093.0],\n  Db: [17.32, 34.65, 69.3, 138.59, 277.18, 554.37, 1108.73, 2217.46],\n  D: [18.35, 36.71, 73.42, 146.83, 293.66, 587.33, 1174.66, 2349.32],\n  Eb: [19.45, 38.89, 77.78, 155.56, 311.13, 622.25, 1244.51, 2489.02],\n  E: [20.6, 41.2, 82.41, 164.81, 329.63, 659.26, 1318.51, 2637.02],\n  F: [21.83, 43.65, 87.31, 174.61, 349.23, 698.46, 1396.91, 2793.83],\n  Gb: [23.12, 46.25, 92.5, 185.0, 369.99, 739.99, 1479.98, 2959.96],\n  G: [24.5, 49.0, 98.0, 196.0, 392.0, 783.99, 1567.98, 3135.96],\n  Ab: [25.96, 51.91, 103.83, 207.65, 415.3, 830.61, 1661.22, 3322.44],\n  A: [27.5, 55.0, 110.0, 220.0, 440.0, 880.0, 1760.0, 3520.0],\n  Bb: [29.14, 58.27, 116.54, 233.08, 466.16, 932.33, 1864.66, 3729.31],\n  B: [30.87, 61.74, 123.47, 246.94, 493.88, 987.77, 1975.53, 3951.07],\n};\n\nexport function noteToFrequency(note: string, octave: number): number {\n  return noteToFreqConversionTable[note][octave - 1];\n}\n","import { noteToFrequency } from '../helper/noteToFrequency';\nimport { NoteStore } from './store';\n\nexport const listOfNotes: string[] = [\n    \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\", \"A\", \"Bb\", \"B\",\n];\n\nexport type NoteConfig = {\n    audioContext: AudioContext,\n    primaryFilter: BiquadFilterNode,\n    sineGain: GainNode,\n    squareGain: GainNode,\n    noiseGain: GainNode,\n};\n\nexport function createAllNotes(store: NoteStore, noteConfig: NoteConfig) {\n    const { audioContext, primaryFilter, sineGain, squareGain, noiseGain } = noteConfig;\n\n    listOfNotes.forEach((noteToCreate) => {\n        let octave;\n        for (octave = 1; octave < 9; octave++) {\n            createNote(store, {\n                freq: noteToFrequency(noteToCreate, octave),\n                name: `${noteToCreate}${octave}`,\n                audioContext,\n                primaryFilter,\n                sineGain,\n                squareGain,\n                noiseGain\n            })\n            // console.log(\"note created\", `${noteToCreate}${octave}`, noteToFrequency(noteToCreate, 3));\n        }\n    })\n}\n\ntype NoteProps = {\n    freq: number,\n    name: string,\n    audioContext: AudioContext,\n    primaryFilter: BiquadFilterNode,\n    sineGain: GainNode,\n    squareGain: GainNode,\n    noiseGain: GainNode\n};\n\nexport const createNote = (store: NoteStore, noteProps: NoteProps) => {\n    const { freq, name, audioContext, primaryFilter, sineGain, squareGain, noiseGain } = noteProps;\n\n    //Gain\n    const sineNoteGain = audioContext.createGain();\n    sineNoteGain.gain.setValueAtTime(0, 0);\n    sineNoteGain.connect(sineGain);\n    const squareNoteGain = audioContext.createGain();\n    squareNoteGain.gain.setValueAtTime(0, 0);\n    squareNoteGain.connect(squareGain);\n    const noiseNoteGain = audioContext.createGain();\n    noiseNoteGain.gain.setValueAtTime(0, 0);\n    noiseNoteGain.connect(noiseGain);\n\n    //Sinus\n    const sineOsc = audioContext.createOscillator();\n    sineOsc.frequency.setValueAtTime(freq, 0);\n    sineOsc.type = 'sine';\n    sineOsc.connect(sineNoteGain);\n    sineOsc.start();\n\n    //Square\n    const squareOsc = audioContext.createOscillator();\n    squareOsc.frequency.setValueAtTime(freq, 0);\n    squareOsc.type = 'square';\n    squareOsc.connect(squareNoteGain);\n    squareOsc.start();\n\n    //Noise\n    const CHANNELS = 1;\n    const buffer = audioContext.createBuffer(\n      CHANNELS,\n      audioContext.sampleRate * CHANNELS,\n      audioContext.sampleRate\n    );\n    const channelData = buffer.getChannelData(0);\n    for (let i = 0; i < buffer.length; i++) {\n        channelData[i] = Math.random() * 2 - 1;\n    }\n    audioContext.resume();\n    const noise = audioContext.createBufferSource();\n    noise.buffer = buffer;\n    noise.connect(noiseNoteGain);\n    noise.loop = true;\n    noise.start();\n\n    // Add to the Store\n    store.addNote(\n      freq,\n      name,\n      sineNoteGain,\n      sineOsc,\n      squareNoteGain,\n      squareOsc,\n      noiseNoteGain,\n      noise,\n    );\n}\n","import { action, makeObservable, observable } from \"mobx\";\nimport { NoteConfig, createAllNotes } from './createAllNotes';\n\nexport interface noteData {\n    freq: number,\n    name: string,\n    sineNoteGain: GainNode,\n    sineOsc: OscillatorNode,\n    squareNoteGain: GainNode,\n    squareOsc: OscillatorNode,\n    noiseNoteGain: GainNode,\n    noise: AudioBufferSourceNode,\n};\n\nexport class NoteStore {\n\n    notes: noteData[] = [];\n\n    constructor() {\n        makeObservable(this, {\n            notes: observable,\n            addNote: action,\n        });\n    }\n\n    createAllNotes(noteConfig: NoteConfig) {\n        createAllNotes(this, noteConfig);\n    }\n\n    addNote(\n        freq: number,\n        name: string,\n        sineNoteGain: GainNode,\n        sineOsc: OscillatorNode,\n        squareNoteGain: GainNode,\n        squareOsc: OscillatorNode,\n        noiseNoteGain: GainNode,\n        noise: AudioBufferSourceNode) {\n\n        const note: noteData = {\n            freq: freq,\n            name: name,\n            sineNoteGain: sineNoteGain,\n            sineOsc: sineOsc,\n            squareNoteGain: squareNoteGain,\n            squareOsc: squareOsc,\n            noiseNoteGain: noiseNoteGain,\n            noise: noise\n        }\n\n        this.notes.push(note);\n    }\n}\n\nexport const noteStore = new NoteStore();\n","export default __webpack_public_path__ + \"static/media/knob.8deadf84.svg\";","import { useEffect, useState, useCallback } from \"react\";\n\nimport { Dispatcher } from \"../../useAppState\";\nimport { degreeToValue } from \"../../helper/degreeToValue\";\nimport { valueToDegree } from \"../../helper/valueToDegree\";\nimport knob from \"../../logos/knob.svg\";\nimport \"./Knob.css\";\n\ntype KnobProps = {\n  value: number;\n  name: \"octave\" | \"mainVolume\" | \"noiseVolume\" | \"sineVolume\" | \"squareVolume\" | \"filterFreq\";\n  min: number;\n  max: number;\n  multiply: number;\n  dispatch: Dispatcher;\n  title: string;\n  unit: String;\n  color?: boolean;\n};\n\nconst Knob = (props: KnobProps) => {\n  const { value, name, min, max, multiply, dispatch, title, unit, color } = props;\n\n  const [showValue, setShowValue] = useState(false);\n  const [knobValue, setKnobValue] = useState(value);\n  const [originalClientY, setOriginalClientY] = useState(0);\n  const [mouseIsDown, setMouseIsDown] = useState(false);\n\n  useEffect(() => {\n    document.getElementById(title)!.setAttribute(\"draggable\", \"false\");\n    setKnobValue(knobValue * multiply);\n    const knobRotation = valueToDegree(knobValue, min, max, -90, 310);\n    document\n      .getElementById(title)!\n      .style.setProperty(\"transform\", `rotate(${knobRotation}deg)`);\n  }, [title, setKnobValue, multiply, min, max]);\n\n  const mouseDownHandler = useCallback(\n    (event: React.MouseEvent) => {\n      window.addEventListener('mouseup',mouseUpHandler)\n      setOriginalClientY(event.clientY);\n      setMouseIsDown(true);\n    },\n    [setOriginalClientY, setMouseIsDown]\n  );\n\n  const mouseUpHandler = useCallback(() => {\n    window.removeEventListener('mouseup',mouseUpHandler)\n    setOriginalClientY(0);\n    setMouseIsDown(false);\n  }, [setOriginalClientY, setMouseIsDown]);\n\n  const mouseLeaveHandler = useCallback(() => {\n    if (!mouseIsDown) {\n      setOriginalClientY(0);\n    }\n  }, [mouseIsDown, setOriginalClientY]);\n\n  const mouseMoveHandler = useCallback(\n    (event: React.MouseEvent) => {\n      if (originalClientY !== 0 && mouseIsDown) {\n        const newClientY = event.clientY;\n        let movedInPixel = originalClientY - newClientY + 50;\n        if (movedInPixel > 100) {\n          movedInPixel = 100;\n        }\n        if (movedInPixel < 0) {\n          movedInPixel = 0;\n        }\n        const movedInDegree = movedInPixel * 3.1 - 90; // 315 degree max, with start at - 90\n        const newValue = degreeToValue(movedInDegree, min, max, -90, 310);\n\n        document\n          .getElementById(title)!\n          .style.setProperty(\"transform\", `rotate(${movedInDegree}deg)`);\n        dispatch({ type: name, value: newValue });\n        setKnobValue(Math.round(newValue * multiply));\n      }\n    },\n    [originalClientY, mouseIsDown, min, max, multiply, title, dispatch]\n  );\n\n  return (\n    <div\n      className=\"knob\"\n      onMouseEnter={() => setShowValue(true)}\n      onMouseLeave={() => setShowValue(false)}\n    >\n      <img\n        src={knob}\n        id={title}\n        className=\"knob__image\"\n        onMouseDown={mouseDownHandler}\n        onMouseMove={mouseMoveHandler}\n        onMouseLeave={mouseLeaveHandler}\n        style={ color ? { filter: \"hue-rotate(180deg) sepia(20%)\"} : {}}\n      />\n      {showValue ? (\n        <span className=\"knob__value\">\n          {knobValue}\n          {unit}\n        </span>\n      ) : (\n          <span className=\"knob__name\">{title}</span>\n        )}\n    </div>\n  );\n};\n\nexport default Knob;\n","// https://docs.google.com/spreadsheets/d/1zSqASppyuRqORSJSe24vLB0m9WUAfTefJKiqrHjrkXg/edit#gid=0\nexport function valueToDegree(\n  value: number,\n  minValue: number,\n  maxValue: number,\n  startDegree: number,\n  maxRotation: number\n): number {\n  return (((value * maxRotation) / (maxValue - minValue)) + startDegree);\n}\n","import { useState } from \"react\";\n\nimport \"./Slider.css\";\n\nconst Slider = () => {\n  const [value, setValue] = useState(2);\n\n  const changeHandler = (event: React.ChangeEvent) => {\n    console.log(event);\n  };\n\n  return (\n    <div className=\"slider\">\n      <input\n        className=\"slider__input\"\n        type=\"range\"\n        id=\"slider\"\n        name=\"slider\"\n        min=\"0\"\n        max=\"4\"\n        step=\"1\"\n        defaultValue=\"2\"\n        onChange={changeHandler}\n      />\n      <label htmlFor=\"slider\" className=\"slider__title\">Octave Select</label>\n    </div>\n  );\n};\n\nexport default Slider;\n","import { useState } from \"react\";\nimport './PresetDropDown.css';\n\nconst PresetDropDown = () => {\n  const [value, setValue] = useState(2);\n\n  const changeHandler = (event: React.ChangeEvent) => {\n    console.log(event);\n  };\n\n  return (\n    <div className=\"Preset\">\n      <select name=\"rpeset\" id=\"preset\" className=\"Preset__dropdown\">\n        <option value=\"1\">First Preset</option>\n        <option value=\"2\">Sinus Only</option>\n        <option value=\"3\">Noise Only</option>\n        <option value=\"4\">All-to-the-Max</option>\n      </select>\n      <label htmlFor=\"htmlFor\" className=\"Preset__title\">Choose a preset</label>\n    </div>\n  );\n};\n\nexport default PresetDropDown;\n","import Grid from \"@material-ui/core/Grid\";\n\nimport { State, Dispatcher } from \"../../useAppState\";\nimport Knob from \"../knob/Knob\";\nimport Slider from \"../slider/Slider\";\nimport PresetDropDown from \"../presetDropDown/PresetDropDown\";\n\nimport \"./ControlGrid.css\";\n\ninterface ControlGridProps {\n  dispatch: Dispatcher;\n  state: State;\n}\n\nconst ControlGrid = (props: ControlGridProps) => {\n  const { dispatch, state } = props;\n\n  return (\n    <div className=\"ControlGrid__container\">\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <div className=\"ControlGrid__gridItem\">\n            <Knob\n              value={state.mainVolume}\n              name=\"mainVolume\"\n              dispatch={dispatch}\n              title=\"vol\"\n              min={0}\n              max={0.1}\n              multiply={1000}\n              unit=\"%\"\n            />\n            <Knob\n              value={state.noiseVolume}\n              name=\"noiseVolume\"\n              dispatch={dispatch}\n              title=\"noise\"\n              min={0.01}\n              max={1}\n              multiply={100}\n              unit=\"%\"\n            />\n            <Knob\n              value={state.sineVolume}\n              name=\"sineVolume\"\n              dispatch={dispatch}\n              title=\"sin\"\n              min={0.01}\n              max={1}\n              multiply={100}\n              unit=\"%\"\n            />\n            <Knob\n              value={state.squareVolume}\n              name=\"squareVolume\"\n              dispatch={dispatch}\n              title=\"square\"\n              min={0.01}\n              max={0.8}\n              multiply={100}\n              unit=\"%\"\n            />\n            <Knob\n              value={state.filterFreq}\n              name=\"filterFreq\"\n              dispatch={dispatch}\n              title=\"filter\"\n              min={30}\n              max={20000}\n              multiply={1}\n              unit=\"hz\"\n              color={true}\n            />\n          </div>\n        </Grid>\n\n        <Grid item xs={12}>\n          <div className=\"ControlGrid__gridItem\">\n            <Knob\n              value={state.mainVolume}\n              name=\"mainVolume\"\n              dispatch={dispatch}\n              title=\"Attack\"\n              min={0}\n              max={0.1}\n              multiply={1000}\n              unit=\"%\"\n            />\n            <Knob\n              value={state.noiseVolume}\n              name=\"noiseVolume\"\n              dispatch={dispatch}\n              title=\"Decay\"\n              min={0.01}\n              max={1}\n              multiply={100}\n              unit=\"%\"\n            />\n            <Knob\n              value={state.sineVolume}\n              name=\"sineVolume\"\n              dispatch={dispatch}\n              title=\"Sustain\"\n              min={0.01}\n              max={1}\n              multiply={100}\n              unit=\"%\"\n            />\n            <Knob\n              value={state.squareVolume}\n              name=\"squareVolume\"\n              dispatch={dispatch}\n              title=\"Release\"\n              min={0.01}\n              max={0.8}\n              multiply={100}\n              unit=\"%\"\n            />\n          </div>\n        </Grid>\n        <Grid item xs={5}>\n          <Slider />\n        </Grid>\n        <Grid item xs={5}>\n          < PresetDropDown />\n        </Grid>        \n      </Grid>\n    </div>\n  );\n};\n\nexport default ControlGrid;\n","import { useEffect } from 'react';\r\nimport { noteToFrequency } from '../../helper/noteToFrequency';\r\nimport { KeyboardProps } from './Keyboard';\r\n\r\nconst keyboardToNote: { [key: string]: string } = {\r\n  \"a\": \"C\",\r\n  \"w\": \"Db\",\r\n  \"s\": \"D\",\r\n  \"e\": \"Eb\",\r\n  \"d\": \"E\",\r\n  \"f\": \"F\",\r\n  \"t\": \"Gb\",\r\n  \"g\": \"G\",\r\n  \"z\": \"Ab\",\r\n  \"h\": \"A\",\r\n  \"u\": \"Bb\",\r\n  \"j\": \"B\",\r\n}\r\n\r\nfunction toggleClass(keyPressed: string, addClass: boolean) {\r\n  const element = document.getElementById(keyboardToNote[keyPressed]);\r\n  if (keyboardToNote[keyPressed].includes(\"b\")) {\r\n    element?.classList.toggle(\"black__pressed\", addClass);\r\n  } else {\r\n    element?.classList.toggle(\"white__pressed\", addClass);\r\n  }\r\n}\r\n\r\nexport function useKeyboard(props: KeyboardProps) {\r\n  const { playNoteHandler, stopNoteHandler, octave } = props;\r\n\r\n  useEffect(() => {\r\n    const keyDownHandler = (e: KeyboardEvent) => {\r\n      const keyPressed = e.key.toLowerCase();\r\n      if (keyPressed in keyboardToNote) {\r\n        toggleClass(keyPressed, true);\r\n        playNoteHandler(noteToFrequency(keyboardToNote[keyPressed], octave));\r\n      }\r\n    };\r\n\r\n    const keyUpHandler = (e: KeyboardEvent) => {\r\n      const keyPressed = e.key.toLowerCase();\r\n      if (keyPressed in keyboardToNote) {\r\n        toggleClass(keyPressed, false);\r\n        stopNoteHandler(noteToFrequency(keyboardToNote[keyPressed], octave));\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", keyDownHandler);\r\n    document.addEventListener(\"keyup\", keyUpHandler);\r\n\r\n    // cleanup function\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", keyDownHandler);\r\n      document.removeEventListener(\"keyup\", keyUpHandler);\r\n    };\r\n  });\r\n}\r\n","import \"./Keyboard.css\";\nimport { noteToFrequency } from \"../../helper/noteToFrequency\";\nimport { useKeyboard } from './useKeyboard';\nimport { useEffect, useState } from \"react\";\n\nconst keys = [\n  {note: 'C', className: 'white e'},\n  {note: 'Db', className: 'black ds'},\n  {note: 'D', className: 'white d'},\n  {note: 'Eb', className: 'black cs'},\n  {note: 'E', className: 'white c'},\n  {note: 'F', className: 'white b'},\n  {note: 'Gb', className: 'black as'},\n  {note: 'G', className: 'white a'},\n  {note: 'Ab', className: 'black gs'},\n  {note: 'A', className: 'white g'},\n  {note: 'Bb', className: 'black fs'},\n  {note: 'B', className: 'white f'},\n]\n\nexport type KeyboardProps = {\n  playNoteHandler: (freq: number) => void;\n  stopNoteHandler: (freq: number) => void;\n  octave: number;\n};\n\n\nconst Keyboard = (props: KeyboardProps) => {\n  const { playNoteHandler, stopNoteHandler, octave } = props;\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  \n  const handleWindowsResize = () => {\n    setWindowWidth(window.innerWidth);\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowsResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowsResize);\n    };\n  }, [setWindowWidth]);\n\n  useKeyboard(props);\n\n  return (\n    <div>\n      <ul className=\"set\">\n        {keys.map((key) =>\n          <li\n            id={key.note}\n            key={key.note}\n            className={key.className}\n            onMouseDown={() => playNoteHandler(noteToFrequency(key.note, octave))}\n            onMouseUp={() => stopNoteHandler(noteToFrequency(key.note, octave))}\n            onMouseLeave={() => stopNoteHandler(noteToFrequency(key.note, octave))}\n          />\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Keyboard;\n","import { useReducer } from \"react\";\n\ntype Action =\n    { type: 'octave'; value: number } |\n    { type: 'mainVolume'; value: number } |\n    { type: 'noiseVolume'; value: number } |\n    { type: 'sineVolume'; value: number } |\n    { type: 'squareVolume'; value: number } |\n    { type: 'filterFreq'; value: number }\n\n\nexport type State = {\n    octave: number,\n    mainVolume: number,\n    noiseVolume: number,\n    sineVolume: number,\n    squareVolume: number,\n    filterFreq: number\n};\n\nexport type Dispatcher = (action: Action) => void;\n\nfunction reducer(state: any, action: Action) {\n    switch (action.type) {\n        case 'octave':\n            return { ...state, octave: action.value };\n        case 'mainVolume':\n            return { ...state, mainVolume: action.value };\n        case 'noiseVolume':\n            return { ...state, noiseVolume: action.value };\n        case 'sineVolume':\n            return { ...state, sineVolume: action.value };\n        case 'mainVolume':\n            return { ...state, mainVolume: action.value };\n        case 'filterFreq':\n            return { ...state, filterFreq: action.value };\n        default:\n            throw new Error();\n    }\n}\n\nexport function useAppState() {\n    const initStateObject = { octave: 5, mainVolume: 0.05, noiseVolume: 1, sineVolume: 1, squareVolume: 1, filterFreq: 5000 };\n    return useReducer(reducer, initStateObject);\n};\n","import { useEffect, useCallback, useMemo } from 'react';\nimport { noteStore } from \"./store/store\";\nimport ControlGrid from \"./component/controlGrid/ControlGrid\";\nimport Keyboard from \"./component/keyboard/Keyboard\";\nimport { useAppState } from \"./useAppState\";\n\nimport \"./App.css\";\n\nconst App = () => {\n\n  const [state, dispatch] = useAppState();\n\n  const { audioContext, primaryFilter, primaryGainControl, sineGain, squareGain, noiseGain } = useMemo(() => {\n    const audioContext = new AudioContext();\n    const visualizer = audioContext.createAnalyser();\n\n    // Create a Gain control (Master Volume)\n    const primaryGainControl = audioContext.createGain();\n    primaryGainControl.gain.setValueAtTime(state.mainVolume, 0);\n    primaryGainControl.connect(audioContext.destination);\n\n    // Create a filter (LP)\n    const primaryFilter = audioContext.createBiquadFilter();\n    primaryFilter.type = \"lowpass\";\n    primaryFilter.frequency.value = state.filterFreq;\n    primaryFilter.connect(primaryGainControl);\n\n    // Create Sine Gain\n    const sineGain = audioContext.createGain();\n    sineGain.gain.setValueAtTime(state.sineVolume, 0);\n    sineGain.connect(primaryFilter);\n\n    // Create Square Gain\n    const squareGain = audioContext.createGain();\n    squareGain.gain.setValueAtTime(state.squareVolume, 0);\n    squareGain.connect(primaryFilter);\n\n    // Create Noise Gain\n    const noiseGain = audioContext.createGain();\n    noiseGain.gain.setValueAtTime(state.noiseVolume, 0);\n    noiseGain.connect(primaryFilter);\n\n    // Create all notes\n    noteStore.createAllNotes({ audioContext, primaryFilter, sineGain, squareGain, noiseGain });\n\n    return { audioContext, visualizer, primaryFilter, primaryGainControl, sineGain, squareGain, noiseGain };\n  }, []);\n\n  useEffect(() => {\n    // Update FilterFrequence\n    primaryFilter.frequency.value = Math.round(state.filterFreq);\n  }, [state.filterFreq])\n\n  useEffect(() => {\n    // Update primaryGain\n    primaryGainControl.gain.setValueAtTime(state.mainVolume, audioContext.currentTime);\n  }, [state.mainVolume])\n\n  useEffect(() => {\n    // Update sine/square/noise volume\n    sineGain.gain.setValueAtTime(state.sineVolume, audioContext.currentTime);\n    squareGain.gain.setValueAtTime(state.squareVolume, audioContext.currentTime);\n    noiseGain.gain.setValueAtTime(state.noiseVolume, audioContext.currentTime);\n  }, [state.sineVolume, state.squareVolume, state.noiseVolume])\n\n  const playNoteHandler = useCallback((freq: number) => {\n    audioContext.resume();\n    const noteArray = noteStore.notes.find(note => note.freq == freq);\n    if (noteArray) {\n      const sineNoteGain = noteArray.sineNoteGain;\n      sineNoteGain.gain.setValueAtTime(state.sineVolume, audioContext.currentTime);\n      const squareNoteGain = noteArray.squareNoteGain;\n      squareNoteGain.gain.setValueAtTime(state.squareVolume, audioContext.currentTime);\n      const noiseNoteGain = noteArray.noiseNoteGain;\n      noiseNoteGain.gain.setValueAtTime(state.noiseVolume, audioContext.currentTime);\n    }\n  }, [noteStore.notes, audioContext]);\n\n  const stopNoteHandler = useCallback((freq: number) => {\n    const noteArray = noteStore.notes.find(note => note.freq == freq);\n    if (noteArray) {\n      const sineNoteGain = noteArray.sineNoteGain;\n      sineNoteGain.gain.setValueAtTime(sineNoteGain.gain.value, audioContext.currentTime);\n      sineNoteGain.gain.exponentialRampToValueAtTime(0.000001, audioContext.currentTime + 0.03);\n      const squareNoteGain = noteArray.squareNoteGain;\n      squareNoteGain.gain.setValueAtTime(squareNoteGain.gain.value, audioContext.currentTime);\n      squareNoteGain.gain.exponentialRampToValueAtTime(0.000001, audioContext.currentTime + 0.03);\n      const noiseNoteGain = noteArray.noiseNoteGain;\n      noiseNoteGain.gain.setValueAtTime(noiseNoteGain.gain.value, audioContext.currentTime);\n      noiseNoteGain.gain.exponentialRampToValueAtTime(0.000001, audioContext.currentTime + 0.03);\n    }\n  }, [noteStore.notes, audioContext]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div id=\"oscilloscope\"></div>\n        <ControlGrid\n          dispatch={dispatch}\n          state={state}\n        />\n        <Keyboard\n          playNoteHandler={playNoteHandler}\n          stopNoteHandler={stopNoteHandler}\n          octave={state.octave}\n        />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n\n// Use reducer instead of Setter\n// https://reactjs.org/docs/hooks-reference.html#usereducer\n// customhook : useAppState()","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}