{"version":3,"sources":["helper/noteToFrequency.ts","store/createAllNotes.ts","store/store.tsx","component/keyboard/useKeyboard.ts","component/keyboard/Keyboard.tsx","logos/knob.svg","component/knob/Knob.tsx","helper/valueToDegree.ts","App.tsx","index.tsx"],"names":["noteToFreqConversionTable","C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B","noteToFrequency","note","octave","listOfNotes","createNote","store","noteProps","freq","name","audioContext","sineGain","primaryFilter","squareGain","noiseGain","sineNoteGain","createGain","gain","setValueAtTime","connect","squareNoteGain","noiseNoteGain","sineOsc","createOscillator","frequency","type","start","squareOsc","buffer","createBuffer","sampleRate","channelData","getChannelData","i","length","Math","random","resume","noise","createBufferSource","loop","addNote","noteStore","notes","makeObservable","this","observable","action","noteConfig","forEach","noteToCreate","createAllNotes","push","keyboardToNote","toggleClass","keyPressed","addClass","element","document","getElementById","includes","classList","toggle","keys","className","Keyboard","props","playNoteHandler","stopNoteHandler","useState","window","innerWidth","setWindowWidth","handleWindowsResize","useEffect","addEventListener","removeEventListener","keyDownHandler","e","key","toLowerCase","keyUpHandler","useKeyboard","map","id","onMouseDown","onMouseUp","onMouseLeave","Knob","value","min","max","multiply","valueSetter","knobName","unit","showValue","setShowValue","knobValue","setKnobValue","originalClientY","setOriginalClientY","mouseIsDown","setMouseIsDown","setAttribute","knobRotation","minValue","maxValue","startDegree","maxRotation","valueToDegree","style","setProperty","mouseDownHandler","useCallback","event","clientY","mouseUpHandler","mouseLeaveHandler","mouseMoveHandler","newClientY","movedInPixel","movedInDegree","newValue","round","onMouseEnter","src","knob","onMouseMove","App","mainVolume","setMainVolume","noiseVolume","setNoiseVolume","sineVolume","setSineVolume","squareVolume","setSquareVolume","filterFreq","setFilterFreq","useMemo","AudioContext","primaryGainControl","destination","createBiquadFilter","currentTime","noteArray","find","exponentialRampToValueAtTime","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6103290e.chunk.js","sourcesContent":["type notesInAnOctave = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number\n];\n\nexport const noteToFreqConversionTable: { [note: string]: notesInAnOctave } = {\n  C: [16.35, 32.7, 65.41, 130.81, 261.63, 523.25, 1046.5, 2093.0],\n  Db: [17.32, 34.65, 69.3, 138.59, 277.18, 554.37, 1108.73, 2217.46],\n  D: [18.35, 36.71, 73.42, 146.83, 293.66, 587.33, 1174.66, 2349.32],\n  Eb: [19.45, 38.89, 77.78, 155.56, 311.13, 622.25, 1244.51, 2489.02],\n  E: [20.6, 41.2, 82.41, 164.81, 329.63, 659.26, 1318.51, 2637.02],\n  F: [21.83, 43.65, 87.31, 174.61, 349.23, 698.46, 1396.91, 2793.83],\n  Gb: [23.12, 46.25, 92.5, 185.0, 369.99, 739.99, 1479.98, 2959.96],\n  G: [24.5, 49.0, 98.0, 196.0, 392.0, 783.99, 1567.98, 3135.96],\n  Ab: [25.96, 51.91, 103.83, 207.65, 415.3, 830.61, 1661.22, 3322.44],\n  A: [27.5, 55.0, 110.0, 220.0, 440.0, 880.0, 1760.0, 3520.0],\n  Bb: [29.14, 58.27, 116.54, 233.08, 466.16, 932.33, 1864.66, 3729.31],\n  B: [30.87, 61.74, 123.47, 246.94, 493.88, 987.77, 1975.53, 3951.07],\n};\n\nexport function noteToFrequency(note: string, octave: number): number {\n  return noteToFreqConversionTable[note][octave - 1];\n}\n","import { noteToFrequency } from '../helper/noteToFrequency';\nimport { NoteStore } from './store';\n\nexport const listOfNotes: string[] = [\n    \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\", \"A\", \"Bb\", \"B\",\n];\n\nexport type NoteConfig = {\n    audioContext: AudioContext,\n    primaryFilter: BiquadFilterNode,\n    sineGain: GainNode,\n    squareGain: GainNode,\n    noiseGain: GainNode,\n};\n\nexport function createAllNotes(store: NoteStore, noteConfig: NoteConfig) {\n    const { audioContext, primaryFilter, sineGain, squareGain, noiseGain } = noteConfig;\n\n    listOfNotes.forEach((noteToCreate) => {\n        let octave;\n        for (octave = 1; octave < 9; octave++) {\n            createNote(store, {\n                freq: noteToFrequency(noteToCreate, octave),\n                name: `${noteToCreate}${octave}`,\n                audioContext,\n                primaryFilter,\n                sineGain,\n                squareGain,\n                noiseGain\n            })\n            // console.log(\"note created\", `${noteToCreate}${octave}`, noteToFrequency(noteToCreate, 3));\n        }\n    })\n}\n\ntype NoteProps = {\n    freq: number,\n    name: string,\n    audioContext: AudioContext,\n    primaryFilter: BiquadFilterNode,\n    sineGain: GainNode,\n    squareGain: GainNode,\n    noiseGain: GainNode\n};\n\nexport const createNote = (store: NoteStore, noteProps: NoteProps) => {\n    const { freq, name, audioContext, primaryFilter, sineGain, squareGain, noiseGain } = noteProps;\n\n    //Gain\n    const sineNoteGain = audioContext.createGain();\n    sineNoteGain.gain.setValueAtTime(0, 0);\n    sineNoteGain.connect(sineGain);\n    const squareNoteGain = audioContext.createGain();\n    squareNoteGain.gain.setValueAtTime(0, 0);\n    squareNoteGain.connect(squareGain);\n    const noiseNoteGain = audioContext.createGain();\n    noiseNoteGain.gain.setValueAtTime(0, 0);\n    noiseNoteGain.connect(noiseGain);\n\n    //Sinus\n    const sineOsc = audioContext.createOscillator();\n    sineOsc.frequency.setValueAtTime(freq, 0);\n    sineOsc.type = 'sine';\n    sineOsc.connect(sineNoteGain);\n    sineOsc.start();\n\n    //Square\n    const squareOsc = audioContext.createOscillator();\n    squareOsc.frequency.setValueAtTime(freq, 0);\n    squareOsc.type = 'square';\n    squareOsc.connect(squareNoteGain);\n    squareOsc.start();\n\n    //Noise\n    const CHANNELS = 1;\n    const buffer = audioContext.createBuffer(\n      CHANNELS,\n      audioContext.sampleRate * CHANNELS,\n      audioContext.sampleRate\n    );\n    const channelData = buffer.getChannelData(0);\n    for (let i = 0; i < buffer.length; i++) {\n        channelData[i] = Math.random() * 2 - 1;\n    }\n    audioContext.resume();\n    const noise = audioContext.createBufferSource();\n    noise.buffer = buffer;\n    noise.connect(noiseNoteGain);\n    noise.loop = true;\n    noise.start();\n\n    // Add to the Store\n    store.addNote(\n      freq,\n      name,\n      sineNoteGain,\n      sineOsc,\n      squareNoteGain,\n      squareOsc,\n      noiseNoteGain,\n      noise,\n    );\n}\n","import { action, makeObservable, observable } from \"mobx\";\nimport { NoteConfig, createAllNotes } from './createAllNotes';\n\nexport interface noteData {\n    freq: number,\n    name: string,\n    sineNoteGain: GainNode,\n    sineOsc: OscillatorNode,\n    squareNoteGain: GainNode,\n    squareOsc: OscillatorNode,\n    noiseNoteGain: GainNode,\n    noise: AudioBufferSourceNode,\n};\n\nexport class NoteStore {\n\n    notes: noteData[] = [];\n\n    constructor() {\n        makeObservable(this, {\n            notes: observable,\n            addNote: action,\n        });\n    }\n\n    createAllNotes(noteConfig: NoteConfig) {\n        createAllNotes(this, noteConfig);\n    }\n\n    addNote(\n        freq: number,\n        name: string,\n        sineNoteGain: GainNode,\n        sineOsc: OscillatorNode,\n        squareNoteGain: GainNode,\n        squareOsc: OscillatorNode,\n        noiseNoteGain: GainNode,\n        noise: AudioBufferSourceNode) {\n\n        const note: noteData = {\n            freq: freq,\n            name: name,\n            sineNoteGain: sineNoteGain,\n            sineOsc: sineOsc,\n            squareNoteGain: squareNoteGain,\n            squareOsc: squareOsc,\n            noiseNoteGain: noiseNoteGain,\n            noise: noise\n        }\n\n        this.notes.push(note);\n    }\n}\n\nexport const noteStore = new NoteStore();\n","import { useEffect } from 'react';\r\nimport { noteToFrequency } from '../../helper/noteToFrequency';\r\nimport { KeyboardProps } from './Keyboard';\r\n\r\nconst keyboardToNote: { [key: string]: string } = {\r\n  \"a\": \"C\",\r\n  \"w\": \"Db\",\r\n  \"s\": \"D\",\r\n  \"e\": \"Eb\",\r\n  \"d\": \"E\",\r\n  \"f\": \"F\",\r\n  \"t\": \"Gb\",\r\n  \"g\": \"G\",\r\n  \"z\": \"Ab\",\r\n  \"h\": \"A\",\r\n  \"u\": \"Bb\",\r\n  \"j\": \"B\",\r\n}\r\n\r\nfunction toggleClass(keyPressed: string, addClass: boolean) {\r\n  const element = document.getElementById(keyboardToNote[keyPressed]);\r\n  if (keyboardToNote[keyPressed].includes(\"b\")) {\r\n    element?.classList.toggle(\"black__pressed\", addClass);\r\n  } else {\r\n    element?.classList.toggle(\"white__pressed\", addClass);\r\n  }\r\n}\r\n\r\nexport function useKeyboard(props: KeyboardProps) {\r\n  const { playNoteHandler, stopNoteHandler, octave } = props;\r\n\r\n  useEffect(() => {\r\n    const keyDownHandler = (e: KeyboardEvent) => {\r\n      const keyPressed = e.key.toLowerCase();\r\n      if (keyPressed in keyboardToNote) {\r\n        toggleClass(keyPressed, true);\r\n        playNoteHandler(noteToFrequency(keyboardToNote[keyPressed], octave));\r\n      }\r\n    };\r\n\r\n    const keyUpHandler = (e: KeyboardEvent) => {\r\n      const keyPressed = e.key.toLowerCase();\r\n      if (keyPressed in keyboardToNote) {\r\n        toggleClass(keyPressed, false);\r\n        stopNoteHandler(noteToFrequency(keyboardToNote[keyPressed], octave));\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", keyDownHandler);\r\n    document.addEventListener(\"keyup\", keyUpHandler);\r\n\r\n    // cleanup function\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", keyDownHandler);\r\n      document.removeEventListener(\"keyup\", keyUpHandler);\r\n    };\r\n  });\r\n}\r\n","import \"./Keyboard.css\";\nimport { noteToFrequency } from \"../../helper/noteToFrequency\";\nimport { useKeyboard } from './useKeyboard';\nimport { useEffect, useState } from \"react\";\n\nconst keys = [\n  {note: 'C', className: 'white e'},\n  {note: 'Db', className: 'black ds'},\n  {note: 'D', className: 'white d'},\n  {note: 'Eb', className: 'black cs'},\n  {note: 'E', className: 'white c'},\n  {note: 'F', className: 'white b'},\n  {note: 'Gb', className: 'black as'},\n  {note: 'G', className: 'white a'},\n  {note: 'Ab', className: 'black gs'},\n  {note: 'A', className: 'white g'},\n  {note: 'Bb', className: 'black fs'},\n  {note: 'B', className: 'white f'},\n]\n\nexport type KeyboardProps = {\n  playNoteHandler: (freq: number) => void;\n  stopNoteHandler: (freq: number) => void;\n  octave: number;\n};\n\n\nconst Keyboard = (props: KeyboardProps) => {\n  const { playNoteHandler, stopNoteHandler, octave } = props;\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  \n  const handleWindowsResize = () => {\n    setWindowWidth(window.innerWidth);\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowsResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowsResize);\n    };\n  }, [setWindowWidth]);\n\n  useKeyboard(props);\n\n  return (\n    <div>\n      <ul className=\"set\">\n        {keys.map((key) =>\n          <li\n            id={key.note}\n            key={key.note}\n            className={key.className}\n            onMouseDown={() => playNoteHandler(noteToFrequency(key.note, octave))}\n            onMouseUp={() => stopNoteHandler(noteToFrequency(key.note, octave))}\n            onMouseLeave={() => stopNoteHandler(noteToFrequency(key.note, octave))}\n          />\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Keyboard;\n","export default __webpack_public_path__ + \"static/media/knob.8deadf84.svg\";","import { useEffect, useState, useCallback } from 'react';\nimport { degreeToValue } from '../../helper/degreeToValue';\nimport { valueToDegree } from '../../helper/valueToDegree';\nimport knob from '../../logos/knob.svg';\nimport \"./Knob.css\";\n\ntype KnobProps = {\n    value: number,\n    min: number,\n    max: number,\n    multiply: number,\n    valueSetter: (value: number) => void,\n    knobName: string,\n    unit: String\n};\n\nconst Knob = (props: KnobProps) => {\n    const { value, min, max, multiply, valueSetter, knobName, unit } = props;\n\n    const [showValue, setShowValue] = useState(false);\n    const [knobValue, setKnobValue] = useState(value);\n    const [originalClientY, setOriginalClientY] = useState(0);\n    const [mouseIsDown, setMouseIsDown] = useState(false);\n\n    useEffect(() => {\n        document.getElementById(knobName)!.setAttribute('draggable', \"false\");\n        setKnobValue(knobValue * multiply);\n        const knobRotation = valueToDegree(knobValue, min, max, -90, 310)\n        document.getElementById(knobName)!.style.setProperty('transform', `rotate(${knobRotation}deg)`);\n    }, [knobName, setKnobValue, multiply, min, max]);\n\n    const mouseDownHandler = useCallback((event: React.MouseEvent) => {\n        setOriginalClientY(event.clientY);\n        setMouseIsDown(true);\n    }, [setOriginalClientY, setMouseIsDown]);\n\n    const mouseUpHandler = useCallback(() => {\n        setOriginalClientY(0);\n        setMouseIsDown(false);\n    }, [setOriginalClientY, setMouseIsDown]);\n\n    const mouseLeaveHandler = useCallback(() => {\n        if (!mouseIsDown) {\n            setOriginalClientY(0);\n        }\n    }, [mouseIsDown, setOriginalClientY]);\n\n    const mouseMoveHandler = useCallback((event: React.MouseEvent) => {\n        if (originalClientY !== 0 && mouseIsDown) {\n            const newClientY = event.clientY;\n            let movedInPixel = (originalClientY - newClientY) + 50;\n            if (movedInPixel > 100) {\n                movedInPixel = 100;\n            }\n            if (movedInPixel < 0) {\n                movedInPixel = 0;\n            }\n            const movedInDegree = (movedInPixel * 3.1) - 90; // 315 degree max, with start at - 90\n            const newValue = degreeToValue(movedInDegree, min, max, -90, 310);\n\n            document.getElementById(knobName)!.style.setProperty('transform', `rotate(${movedInDegree}deg)`);\n            valueSetter(newValue);\n            setKnobValue(Math.round(newValue * multiply));\n        }\n    }, [originalClientY, mouseIsDown, min, max, multiply, knobName, valueSetter]);\n\n    return (\n        <div\n            className=\"knob\"\n            onMouseEnter={() => setShowValue(true)}\n            onMouseLeave={() => setShowValue(false)}\n        >\n            <img\n                src={knob}\n                id={knobName}\n                className=\"knob__image\"\n                onMouseDown={mouseDownHandler}\n                onMouseMove={mouseMoveHandler}\n                onMouseUp={mouseUpHandler}\n                onMouseLeave={mouseLeaveHandler}\n            />\n            {showValue ? (\n              <span className=\"knob__value\">{knobValue}{unit}</span>\n            ) :\n                knobName.length === 1 ? (\n                  <span className=\"knob__specialchar\">{knobName}</span>\n                ) : (\n                  <span className=\"knob__name\">{knobName}</span>\n                )\n            }\n        </div>\n    )\n}\n\nexport default Knob;\n","// https://docs.google.com/spreadsheets/d/1zSqASppyuRqORSJSe24vLB0m9WUAfTefJKiqrHjrkXg/edit#gid=0\nexport function valueToDegree(\n  value: number,\n  minValue: number,\n  maxValue: number,\n  startDegree: number,\n  maxRotation: number\n): number {\n  return (((value * maxRotation) / (maxValue - minValue)) + startDegree);\n}\n","import { useEffect, useState, useCallback, useMemo } from 'react';\nimport { noteStore } from \"./store/store\";\nimport Keyboard from \"./component/keyboard/Keyboard\";\nimport Knob from \"./component/knob/Knob\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [octave, setOctave] = useState(5);\n  const [mainVolume, setMainVolume] = useState(0.05);\n  const [noiseVolume, setNoiseVolume] = useState(1);\n  const [sineVolume, setSineVolume] = useState(1);\n  const [squareVolume, setSquareVolume] = useState(1)\n  const [filterFreq, setFilterFreq] = useState(5000); // from 30hz to 25000hz\n\n \n  const {audioContext, primaryFilter, primaryGainControl, sineGain, squareGain, noiseGain} = useMemo(() => {\n    const audioContext = new AudioContext();\n\n    // Create a Gain control (Master Volume)\n    const primaryGainControl = audioContext.createGain();\n    primaryGainControl.gain.setValueAtTime(mainVolume, 0);\n    primaryGainControl.connect(audioContext.destination);\n\n    // Create a filter (LP)\n    const primaryFilter = audioContext.createBiquadFilter();\n    primaryFilter.type = \"lowpass\";\n    primaryFilter.frequency.value = filterFreq;\n    primaryFilter.connect(primaryGainControl);\n\n    // Create Sine Gain\n    const sineGain = audioContext.createGain();\n    sineGain.gain.setValueAtTime(sineVolume, 0);\n    sineGain.connect(primaryFilter);\n\n    // Create Square Gain\n    const squareGain = audioContext.createGain();\n    squareGain.gain.setValueAtTime(squareVolume, 0);\n    squareGain.connect(primaryFilter);\n\n    // Create Noise Gain\n    const noiseGain = audioContext.createGain();\n    noiseGain.gain.setValueAtTime(noiseVolume, 0);\n    noiseGain.connect(primaryFilter);\n\n    // Create all notes\n    noteStore.createAllNotes({ audioContext, primaryFilter, sineGain, squareGain, noiseGain });\n\n    return {audioContext, primaryFilter, primaryGainControl, sineGain, squareGain, noiseGain};\n  }, []);\n\n  useEffect(() => {\n    // Update FilterFrequence\n    primaryFilter.frequency.value = Math.round(filterFreq);\n  }, [filterFreq])\n\n  useEffect(() => {\n    // Update primaryGain\n    primaryGainControl.gain.setValueAtTime(mainVolume, audioContext.currentTime);\n  }, [mainVolume])\n\n  useEffect(() => {\n    // Update sine/square/noise volume\n    sineGain.gain.setValueAtTime(sineVolume, audioContext.currentTime);\n    squareGain.gain.setValueAtTime(squareVolume, audioContext.currentTime);\n    noiseGain.gain.setValueAtTime(noiseVolume, audioContext.currentTime);\n  }, [sineVolume, squareVolume, noiseVolume])\n\n  const playNoteHandler = useCallback((freq: number) => {\n    audioContext.resume();\n    const noteArray = noteStore.notes.find(note => note.freq == freq);\n    if (noteArray) {\n      const sineNoteGain = noteArray.sineNoteGain;\n      sineNoteGain.gain.setValueAtTime(sineVolume, audioContext.currentTime);\n      const squareNoteGain = noteArray.squareNoteGain;\n      squareNoteGain.gain.setValueAtTime(squareVolume, audioContext.currentTime);\n      const noiseNoteGain = noteArray.noiseNoteGain;\n      noiseNoteGain.gain.setValueAtTime(noiseVolume, audioContext.currentTime);\n    }\n  }, [noteStore.notes, audioContext]);\n\n  const stopNoteHandler = useCallback((freq: number) => {\n    const noteArray = noteStore.notes.find(note => note.freq == freq);\n    if (noteArray) {\n      const sineNoteGain = noteArray.sineNoteGain;\n      sineNoteGain.gain.setValueAtTime(sineNoteGain.gain.value, audioContext.currentTime);\n      sineNoteGain.gain.exponentialRampToValueAtTime(0.000001, audioContext.currentTime + 0.03);\n      const squareNoteGain = noteArray.squareNoteGain;\n      squareNoteGain.gain.setValueAtTime(squareNoteGain.gain.value, audioContext.currentTime);\n      squareNoteGain.gain.exponentialRampToValueAtTime(0.000001, audioContext.currentTime + 0.03);\n      const noiseNoteGain = noteArray.noiseNoteGain;\n      noiseNoteGain.gain.setValueAtTime(noiseNoteGain.gain.value, audioContext.currentTime);\n      noiseNoteGain.gain.exponentialRampToValueAtTime(0.000001, audioContext.currentTime + 0.03);\n    }\n  }, [noteStore.notes, audioContext]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p> </p>\n        <div>\n          <Knob value={mainVolume} valueSetter={setMainVolume} knobName=\"vol\" min={0} max={0.1} multiply={1000} unit=\"%\" />\n          <Knob value={noiseVolume} valueSetter={setNoiseVolume} knobName=\"noise\" min={0.01} max={1} multiply={100} unit=\"%\" />\n          <Knob value={sineVolume} valueSetter={setSineVolume} knobName=\"sin\" min={0.01} max={1} multiply={100} unit=\"%\" />\n          <Knob value={squareVolume} valueSetter={setSquareVolume} knobName=\"square\" min={0.01} max={1} multiply={100} unit=\"%\" />\n          <Knob value={filterFreq} valueSetter={setFilterFreq} knobName=\"filter\" min={30} max={20000} multiply={1} unit=\"hz\" />\n        </div>\n        <Keyboard\n          playNoteHandler={playNoteHandler}\n          stopNoteHandler={stopNoteHandler}\n          octave={octave}\n        />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}