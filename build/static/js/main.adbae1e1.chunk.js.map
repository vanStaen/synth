{"version":3,"sources":["helper/noteToFrequency.ts","component/keyboard/Keyboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["noteToFreqConvertionTable","C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B","noteToFrequency","note","octave","notes","keyboardToNote","Keyboard","playNoteHandler","stopNoteHandler","useEffect","keydownhandler","e","keyPressed","key","toLowerCase","element","document","getElementById","includes","classList","add","keyuphandler","remove","addEventListener","removeEventListener","className","id","onClick","App","useState","volume","fitlerFreq","audioContext","AudioContext","primaryGainControl","createGain","gain","setValueAtTime","connect","destination","primaryfilter","createBiquadFilter","type","frequency","value","oscMap","Map","buffer","createBuffer","sampleRate","channelData","getChannelData","i","length","Math","random","resume","whiteNoiseSource","createBufferSource","start","freq","has","sinOscillator","createOscillator","set","get","stop","currentTime","disconnect","delete","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.adbae1e1.chunk.js","sourcesContent":["type notesInAnOctave = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number\n];\n\nconst noteToFreqConvertionTable: { [note: string]: notesInAnOctave } = {\n  C: [16.35, 32.7, 65.41, 130.81, 261.63, 523.25, 1046.5, 2093.0],\n  Db: [17.32, 34.65, 69.3, 138.59, 277.18, 554.37, 1108.73, 2217.46],\n  D: [18.35, 36.71, 73.42, 146.83, 293.66, 587.33, 1174.66, 2349.32],\n  Eb: [19.45, 38.89, 77.78, 155.56, 311.13, 622.25, 1244.51, 2489.02],\n  E: [20.6, 41.2, 82.41, 164.81, 329.63, 659.26, 1318.51, 2637.02],\n  F: [21.83, 43.65, 87.31, 174.61, 349.23, 698.46, 1396.91, 2793.83],\n  Gb: [23.12, 46.25, 92.5, 185.0, 369.99, 739.99, 1479.98, 2959.96],\n  G: [24.5, 49.0, 98.0, 196.0, 392.0, 783.99, 1567.98, 3135.96],\n  Ab: [25.96, 51.91, 103.83, 207.65, 415.3, 830.61, 1661.22, 3322.44],\n  A: [27.5, 55.0, 110.0, 220.0, 440.0, 880.0, 1760.0, 3520.0],\n  Bb: [29.14, 58.27, 116.54, 233.08, 466.16, 932.33, 1864.66, 3729.31],\n  B: [30.87, 61.74, 123.47, 246.94, 493.88, 987.77, 1975.53, 3951.07],\n};\n\nexport default function noteToFrequency(note: string, octave: number) {\n  const frequency = noteToFreqConvertionTable[note][octave];\n  return frequency;\n}\n","import \"./Keyboard.css\";\nimport noteToFrequency from \"../../helper/noteToFrequency\";\nimport { useEffect } from \"react\";\n\nconst notes: { [note: string]: string } = {\n  \"Aflat\" : \"Ab\",\n  \"A\" : \"A\",\n  \"Asharp\" : \"Bb\",\n  \"Bflat\" : \"Bb\",\n  \"B\" : \"B\",\n  \"C\" : \"C\",\n  \"Csharp\" : \"Db\",\n  \"Dflat\" : \"Db\",\n  \"D\" : \"D\",\n  \"Dsharp\" : \"Eb\",\n  \"Eflat\" : \"Eb\",\n  \"E\" : \"E\",\n  \"F\" : \"F\",\n  \"Fsharp\" : \"Gb\",\n  \"Gflat\" : \"Gb\",\n  \"G\" : \"G\",\n  \"Gsharp\" : \"Ab\",\n}\n\nconst keyboardToNote: { [key: string]: string } = {\n  \"a\" : \"C\",\n  \"w\" : \"Csharp\",\n  \"s\" : \"D\",\n  \"e\" : \"Dsharp\",\n  \"d\" : \"E\",\n  \"f\" : \"F\",\n  \"t\" : \"Fsharp\",\n  \"g\" : \"G\",\n  \"z\" : \"Gsharp\",\n  \"h\" : \"A\",\n  \"u\" : \"Asharp\",\n  \"j\" : \"B\",\n}\n\ntype KeyboardProps = {\n  playNoteHandler: (freq: number) => void;\n  stopNoteHandler: (freq: number) => void;\n  octave: number;\n};\n\nconst Keyboard = ({ playNoteHandler, stopNoteHandler, octave }: KeyboardProps) => {\n  const handleKeyPress = () => {\n    const keydownhandler = (e: KeyboardEvent) => {\n      const keyPressed = e.key.toLowerCase();\n      if (keyPressed in keyboardToNote) {\n        var element = document.getElementById(keyboardToNote[keyPressed]);\n        element && ( keyboardToNote[keyPressed].includes(\"sharp\") ? \n        element.classList.add(\"black__pressed\") : \n        element.classList.add(\"white__pressed\") )\n        playNoteHandler(noteToFrequency(notes[keyboardToNote[keyPressed]], octave));\n      }\n    };\n\n    const keyuphandler = (e: KeyboardEvent) => {\n      const keyPressed = e.key.toLowerCase();\n      if (keyPressed in keyboardToNote) {\n        var element = document.getElementById(keyboardToNote[keyPressed]);\n        element && ( keyboardToNote[keyPressed].includes(\"sharp\") ? \n        element.classList.remove(\"black__pressed\") :\n        element.classList.remove(\"white__pressed\") )\n        stopNoteHandler(noteToFrequency(notes[keyboardToNote[keyPressed]], octave));\n      }\n    };\n\n    document.addEventListener(\"keydown\", keydownhandler);\n    document.addEventListener(\"keyup\", keyuphandler);\n\n    // cleanup function\n    return () => {\n      document.removeEventListener(\"keydown\", keydownhandler);\n      document.removeEventListener(\"keyup\", keyuphandler);\n    };\n  };\n\n  useEffect(handleKeyPress);\n\n  return (\n    <div>\n      <ul className=\"set\">\n        <li\n          id=\"C\"\n          className=\"white e\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"C\"], octave))}\n        ></li>\n        <li\n          id=\"Csharp\"\n          className=\"black ds\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"Csharp\"], octave))}\n        ></li>\n        <li\n          id=\"D\"\n          className=\"white d\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"D\"], octave))}\n        ></li>\n        <li\n          id=\"Dsharp\"\n          className=\"black cs\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"Dsharp\"], octave))}\n        ></li>\n        <li\n          id=\"E\"\n          className=\"white c\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"E\"], octave))}\n        ></li>\n        <li\n          id=\"F\"\n          className=\"white b\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"F\"], octave))}\n        ></li>\n        <li\n          id=\"Fsharp\"\n          className=\"black as\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"Fsharp\"], octave))}\n        ></li>\n        <li\n          id=\"G\"\n          className=\"white a\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"G\"], octave))}\n        ></li>\n        <li\n          id=\"Gsharp\"\n          className=\"black gs\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"Gsharp\"], octave))}\n        ></li>\n        <li\n          id=\"A\"\n          className=\"white g\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"A\"], octave))}\n        ></li>\n        <li\n          id=\"Asharp\"\n          className=\"black fs\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"Asharp\"], octave))}\n        ></li>\n        <li\n          id=\"B\"\n          className=\"white f\"\n          onClick={() => playNoteHandler(noteToFrequency(notes[\"B\"], octave))}\n        ></li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Keyboard;\n","import { useState, useEffect } from 'react';\nimport Keyboard from './component/keyboard/Keyboard';\n\nimport './App.css';\n\nconst App = () => {\n\n  const [octave, setOctave] = useState(4);\n  const [volume, setVolume] = useState(0.05);\n  const [fitlerFreq, setFitlerFreq] = useState(5000);  \n\n  const audioContext = new AudioContext();\n\n  // Create a Gain control (Master Volume)\n  const primaryGainControl= audioContext.createGain();\n  primaryGainControl.gain.setValueAtTime(volume, 0);\n  primaryGainControl.connect(audioContext.destination);\n\n  // Create a filter (LP)\n  const primaryfilter = audioContext.createBiquadFilter();\n  primaryfilter.type = \"lowpass\";\n  primaryfilter.frequency.value = fitlerFreq;\n  primaryfilter.connect(primaryGainControl);\n\n\n  const playWhiteNoiseHandler = () => {   \n\n      // First paramter = number of chanel (1 for mono, 2 for duo <-> Stero or polyphony)\n      const buffer = audioContext.createBuffer(\n        1,\n        audioContext.sampleRate * 1,\n        audioContext.sampleRate,\n      )\n      const channelData = buffer.getChannelData(0);\n      for (let i = 0; i < buffer.length;i++) {\n        channelData[i] = Math.random() * 2 - 1;\n      }  \n      audioContext.resume();\n      const whiteNoiseSource = audioContext.createBufferSource();\n      whiteNoiseSource.buffer = buffer;\n      whiteNoiseSource.connect(primaryfilter);\n      whiteNoiseSource.start();\n\n  }\n\n  const oscMap = new Map();\n\n  const playNoteHandler = (freq: number) => {  \n    if (!oscMap.has(freq)) {\n      audioContext.resume();\n      const sinOscillator = audioContext.createOscillator();\n      sinOscillator.frequency.setValueAtTime(freq, 0);\n      sinOscillator.connect(primaryfilter);\n      sinOscillator.start();    \n      oscMap.set(freq, sinOscillator);\n    } \n  }\n\n  const stopNoteHandler = (freq: number) => {  \n    if (oscMap.has(freq)) {  \n      const sinOscillator = oscMap.get(freq);\n      sinOscillator.stop(audioContext.currentTime + 0.1);\n      sinOscillator.disconnect(primaryfilter);\n      oscMap.delete(freq);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Synth \n        </p>\n        <button onClick={playWhiteNoiseHandler}>White Noise</button>\n        <Keyboard \n          playNoteHandler={playNoteHandler} \n          stopNoteHandler={stopNoteHandler} \n          octave={octave}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}