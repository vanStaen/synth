{"version":3,"sources":["helper/noteToFrequency.ts","store/createAllNotes.ts","store/store.tsx","component/keyboard/useKeyboard.ts","component/keyboard/Keyboard.tsx","logos/knob.svg","component/knob/Knob.tsx","helper/valueToDegree.ts","App.tsx","index.tsx"],"names":["noteToFreqConversionTable","C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B","noteToFrequency","note","octave","listOfNotes","createNote","store","noteProps","freq","name","audioContext","primaryFilter","sineVolume","squareVolume","noiseVolume","noteGain","createGain","gain","setValueAtTime","connect","sinGain","sinOsc","createOscillator","frequency","type","start","squareGain","squareOsc","buffer","createBuffer","sampleRate","channelData","getChannelData","i","length","Math","random","resume","whiteNoiseGain","whiteNoise","createBufferSource","loop","addNote","noteStore","notes","makeObservable","this","observable","action","noteConfig","forEach","noteToCreate","createAllNotes","push","keyboardToNote","toggleClass","keyPressed","addClass","element","document","getElementById","includes","classList","toggle","keys","className","Keyboard","props","playNoteHandler","stopNoteHandler","useEffect","keyDownHandler","e","key","toLowerCase","keyUpHandler","addEventListener","removeEventListener","useKeyboard","map","id","onMouseDown","onMouseUp","onMouseLeave","Knob","value","min","max","multiply","valueSetter","knobName","unit","useState","showValue","setShowValue","knobValue","setKnobValue","originalClientY","setOriginalClientY","mouseIsDown","setMouseIsDown","setAttribute","knobRotation","minValue","maxValue","startDegree","maxRotation","valueToDegree","style","setProperty","mouseDownHandler","useCallback","event","clientY","mouseUpHandler","mouseLeaveHandler","mouseMoveHandler","newClientY","movedInPixel","movedInDegree","newValue","round","onMouseEnter","src","knob","onMouseMove","App","mainVolume","setMainVolume","setNoiseVolume","setSineVolume","setSquareVolume","filterFreq","setFilterFreq","useMemo","AudioContext","primaryGainControl","destination","createBiquadFilter","noteArray","find","currentTime","exponentialRampToValueAtTime","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.34cd0c29.chunk.js","sourcesContent":["type notesInAnOctave = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number\n];\n\nexport const noteToFreqConversionTable: { [note: string]: notesInAnOctave } = {\n  C: [16.35, 32.7, 65.41, 130.81, 261.63, 523.25, 1046.5, 2093.0],\n  Db: [17.32, 34.65, 69.3, 138.59, 277.18, 554.37, 1108.73, 2217.46],\n  D: [18.35, 36.71, 73.42, 146.83, 293.66, 587.33, 1174.66, 2349.32],\n  Eb: [19.45, 38.89, 77.78, 155.56, 311.13, 622.25, 1244.51, 2489.02],\n  E: [20.6, 41.2, 82.41, 164.81, 329.63, 659.26, 1318.51, 2637.02],\n  F: [21.83, 43.65, 87.31, 174.61, 349.23, 698.46, 1396.91, 2793.83],\n  Gb: [23.12, 46.25, 92.5, 185.0, 369.99, 739.99, 1479.98, 2959.96],\n  G: [24.5, 49.0, 98.0, 196.0, 392.0, 783.99, 1567.98, 3135.96],\n  Ab: [25.96, 51.91, 103.83, 207.65, 415.3, 830.61, 1661.22, 3322.44],\n  A: [27.5, 55.0, 110.0, 220.0, 440.0, 880.0, 1760.0, 3520.0],\n  Bb: [29.14, 58.27, 116.54, 233.08, 466.16, 932.33, 1864.66, 3729.31],\n  B: [30.87, 61.74, 123.47, 246.94, 493.88, 987.77, 1975.53, 3951.07],\n};\n\nexport function noteToFrequency(note: string, octave: number): number {\n  return noteToFreqConversionTable[note][octave - 1];\n}\n","import { noteToFrequency } from '../helper/noteToFrequency';\nimport { NoteStore } from './store';\n\nexport const listOfNotes: string[] = [\n    \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\", \"A\", \"Bb\", \"B\",\n];\n\nexport type NoteConfig = {\n    audioContext: AudioContext,\n    primaryFilter: BiquadFilterNode,\n    sineVolume: number,\n    squareVolume: number,\n    noiseVolume: number,\n};\n\nexport function createAllNotes(store: NoteStore, noteConfig: NoteConfig) {\n    const { audioContext, primaryFilter, sineVolume, squareVolume, noiseVolume } = noteConfig;\n\n    listOfNotes.forEach((noteToCreate) => {\n        let octave;\n        for (octave = 1; octave < 9; octave++) {\n            createNote(store, {\n                freq: noteToFrequency(noteToCreate, octave),\n                name: `${noteToCreate}${octave}`,\n                audioContext,\n                primaryFilter,\n                sineVolume,\n                squareVolume,\n                noiseVolume\n            })\n            // console.log(\"note created\", `${noteToCreate}${octave}`, noteToFrequency(noteToCreate, 3));\n        }\n    })\n}\n\ntype NoteProps = {\n    freq: number,\n    name: string,\n    audioContext: AudioContext,\n    primaryFilter: BiquadFilterNode,\n    sineVolume: number,\n    squareVolume: number,\n    noiseVolume: number\n};\n\nexport const createNote = (store: NoteStore, noteProps: NoteProps) => {\n    const { freq, name, audioContext, primaryFilter, sineVolume, squareVolume, noiseVolume } = noteProps;\n\n    //Gain\n    const noteGain = audioContext.createGain();\n    noteGain.gain.setValueAtTime(0, 0);\n    noteGain.connect(primaryFilter);\n\n    //Sinus\n    const sinGain = audioContext.createGain();\n    sinGain.gain.setValueAtTime(sineVolume, 0);\n    sinGain.connect(noteGain);\n    const sinOsc = audioContext.createOscillator();\n    sinOsc.frequency.setValueAtTime(freq, 0);\n    sinOsc.type = 'sine';\n    sinOsc.connect(sinGain);\n    sinOsc.start();\n\n    //Square\n    const squareGain = audioContext.createGain();\n    squareGain.gain.setValueAtTime(squareVolume, 0);\n    squareGain.connect(noteGain);\n    const squareOsc = audioContext.createOscillator();\n    squareOsc.frequency.setValueAtTime(freq, 0);\n    squareOsc.type = 'square';\n    squareOsc.connect(squareGain);\n    squareOsc.start();\n\n    //Noise\n    const CHANNELS = 1;\n    const buffer = audioContext.createBuffer(\n      CHANNELS,\n      audioContext.sampleRate * CHANNELS,\n      audioContext.sampleRate\n    );\n    const channelData = buffer.getChannelData(0);\n    for (let i = 0; i < buffer.length; i++) {\n        channelData[i] = Math.random() * 2 - 1;\n    }\n    audioContext.resume();\n    const whiteNoiseGain = audioContext.createGain();\n    whiteNoiseGain.gain.setValueAtTime(noiseVolume, 0);\n    whiteNoiseGain.connect(noteGain);\n    const whiteNoise = audioContext.createBufferSource();\n    whiteNoise.buffer = buffer;\n    whiteNoise.connect(whiteNoiseGain);\n    whiteNoise.loop = true;\n    whiteNoise.start();\n\n    // Add to the Store\n    store.addNote(\n      freq,\n      name,\n      noteGain,\n      sinOsc,\n      sinGain,\n      squareOsc,\n      squareGain,\n      whiteNoise,\n      whiteNoiseGain\n    );\n}\n","import { action, makeObservable, observable } from \"mobx\";\nimport { NoteConfig, createAllNotes } from './createAllNotes';\n\nexport interface noteData {\n    freq: number,\n    name: string,\n    noteGain: GainNode,\n    sinOsc: OscillatorNode,\n    sinGain: GainNode,\n    squareOsc: OscillatorNode,\n    squareGain: GainNode,\n    whiteNoise: AudioBufferSourceNode,\n    whiteNoiseGain: GainNode\n};\n\nexport class NoteStore {\n\n    notes: noteData[] = [];\n\n    constructor() {\n        makeObservable(this, {\n            notes: observable,\n            addNote: action,\n        });\n    }\n\n    createAllNotes(noteConfig: NoteConfig) {\n        createAllNotes(this, noteConfig);\n    }\n\n    addNote(\n        freq: number,\n        name: string,\n        noteGain: GainNode,\n        sinOsc: OscillatorNode,\n        sinGain: GainNode,\n        squareOsc: OscillatorNode,\n        squareGain: GainNode,\n        whiteNoise: AudioBufferSourceNode,\n        whiteNoiseGain: GainNode) {\n\n        const note: noteData = {\n            freq: freq,\n            name: name,\n            noteGain: noteGain,\n            sinOsc: sinOsc,\n            sinGain: sinGain,\n            squareOsc: squareOsc,\n            squareGain: squareGain,\n            whiteNoise: whiteNoise,\n            whiteNoiseGain: whiteNoiseGain\n        }\n\n        this.notes.push(note);\n    }\n}\n\nexport const noteStore = new NoteStore();\n","import { useEffect } from 'react';\r\nimport { noteToFrequency } from '../../helper/noteToFrequency';\r\nimport { KeyboardProps } from './Keyboard';\r\n\r\nconst keyboardToNote: { [key: string]: string } = {\r\n  \"a\": \"C\",\r\n  \"w\": \"Db\",\r\n  \"s\": \"D\",\r\n  \"e\": \"Eb\",\r\n  \"d\": \"E\",\r\n  \"f\": \"F\",\r\n  \"t\": \"Gb\",\r\n  \"g\": \"G\",\r\n  \"z\": \"Ab\",\r\n  \"h\": \"A\",\r\n  \"u\": \"Bb\",\r\n  \"j\": \"B\",\r\n}\r\n\r\nfunction toggleClass(keyPressed: string, addClass: boolean) {\r\n  const element = document.getElementById(keyboardToNote[keyPressed]);\r\n  if (keyboardToNote[keyPressed].includes(\"b\")) {\r\n    element?.classList.toggle(\"black__pressed\", addClass);\r\n  } else {\r\n    element?.classList.toggle(\"white__pressed\", addClass);\r\n  }\r\n}\r\n\r\nexport function useKeyboard(props: KeyboardProps) {\r\n  const { playNoteHandler, stopNoteHandler, octave } = props;\r\n\r\n  useEffect(() => {\r\n    const keyDownHandler = (e: KeyboardEvent) => {\r\n      const keyPressed = e.key.toLowerCase();\r\n      if (keyPressed in keyboardToNote) {\r\n        toggleClass(keyPressed, true);\r\n        playNoteHandler(noteToFrequency(keyboardToNote[keyPressed], octave));\r\n      }\r\n    };\r\n\r\n    const keyUpHandler = (e: KeyboardEvent) => {\r\n      const keyPressed = e.key.toLowerCase();\r\n      if (keyPressed in keyboardToNote) {\r\n        toggleClass(keyPressed, false);\r\n        stopNoteHandler(noteToFrequency(keyboardToNote[keyPressed], octave));\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", keyDownHandler);\r\n    document.addEventListener(\"keyup\", keyUpHandler);\r\n\r\n    // cleanup function\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", keyDownHandler);\r\n      document.removeEventListener(\"keyup\", keyUpHandler);\r\n    };\r\n  });\r\n}\r\n","import \"./Keyboard.css\";\nimport { noteToFrequency } from \"../../helper/noteToFrequency\";\nimport { useKeyboard } from './useKeyboard';\n\nconst keys = [\n  {note: 'C', className: 'white e'},\n  {note: 'Db', className: 'black ds'},\n  {note: 'D', className: 'white d'},\n  {note: 'Eb', className: 'black cs'},\n  {note: 'E', className: 'white c'},\n  {note: 'F', className: 'white b'},\n  {note: 'Gb', className: 'black as'},\n  {note: 'G', className: 'white a'},\n  {note: 'Ab', className: 'black gs'},\n  {note: 'A', className: 'white g'},\n  {note: 'Bb', className: 'black fs'},\n  {note: 'B', className: 'white f'},\n]\n\nexport type KeyboardProps = {\n  playNoteHandler: (freq: number) => void;\n  stopNoteHandler: (freq: number) => void;\n  octave: number;\n};\n\nconst Keyboard = (props: KeyboardProps) => {\n  const { playNoteHandler, stopNoteHandler, octave } = props;\n\n  useKeyboard(props);\n\n  return (\n    <div>\n      <ul className=\"set\">\n        {keys.map((key) =>\n          <li\n            id={key.note}\n            key={key.note}\n            className={key.className}\n            onMouseDown={() => playNoteHandler(noteToFrequency(key.note, octave))}\n            onMouseUp={() => stopNoteHandler(noteToFrequency(key.note, octave))}\n            onMouseLeave={() => stopNoteHandler(noteToFrequency(key.note, octave))}\n          />\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Keyboard;\n","export default __webpack_public_path__ + \"static/media/knob.8deadf84.svg\";","import { useEffect, useState, useCallback } from 'react';\nimport { degreeToValue } from '../../helper/degreeToValue';\nimport { valueToDegree } from '../../helper/valueToDegree';\nimport knob from '../../logos/knob.svg';\nimport \"./Knob.css\";\n\ntype KnobProps = {\n    value: number,\n    min: number,\n    max: number,\n    multiply: number,\n    valueSetter: (value: number) => void,\n    knobName: string,\n    unit: String\n};\n\nconst Knob = (props: KnobProps) => {\n    const { value, min, max, multiply, valueSetter, knobName, unit } = props;\n\n    const [showValue, setShowValue] = useState(false);\n    const [knobValue, setKnobValue] = useState(value);\n    const [originalClientY, setOriginalClientY] = useState(0);\n    const [mouseIsDown, setMouseIsDown] = useState(false);\n\n    useEffect(() => {\n        document.getElementById(knobName)!.setAttribute('draggable', \"false\");\n        setKnobValue(knobValue * multiply);\n        const knobRotation = valueToDegree(knobValue, min, max, -90, 310)\n        document.getElementById(knobName)!.style.setProperty('transform', `rotate(${knobRotation}deg)`);\n    }, [knobName, setKnobValue, multiply, min, max]);\n\n    const mouseDownHandler = useCallback((event: React.MouseEvent) => {\n        setOriginalClientY(event.clientY);\n        setMouseIsDown(true);\n    }, [setOriginalClientY, setMouseIsDown]);\n\n    const mouseUpHandler = useCallback(() => {\n        setOriginalClientY(0);\n        setMouseIsDown(false);\n    }, [setOriginalClientY, setMouseIsDown]);\n\n    const mouseLeaveHandler = useCallback(() => {\n        if (!mouseIsDown) {\n            setOriginalClientY(0);\n        }\n    }, [mouseIsDown, setOriginalClientY]);\n\n    const mouseMoveHandler = useCallback((event: React.MouseEvent) => {\n        if (originalClientY !== 0 && mouseIsDown) {\n            const newClientY = event.clientY;\n            let movedInPixel = (originalClientY - newClientY) + 50;\n            if (movedInPixel > 100) {\n                movedInPixel = 100;\n            }\n            if (movedInPixel < 0) {\n                movedInPixel = 0;\n            }\n            const movedInDegree = (movedInPixel * 3.1) - 90; // 315 degree max, with start at - 90\n            const newValue = degreeToValue(movedInDegree, min, max, -90, 310);\n\n            document.getElementById(knobName)!.style.setProperty('transform', `rotate(${movedInDegree}deg)`);\n            valueSetter(newValue);\n            setKnobValue(Math.round(newValue * multiply));\n        }\n    }, [originalClientY, mouseIsDown, min, max, multiply, knobName, valueSetter]);\n\n    return (\n        <div\n            className=\"knob\"\n            onMouseEnter={() => setShowValue(true)}\n            onMouseLeave={() => setShowValue(false)}\n        >\n            <img\n                src={knob}\n                id={knobName}\n                className=\"knob__image\"\n                onMouseDown={mouseDownHandler}\n                onMouseMove={mouseMoveHandler}\n                onMouseUp={mouseUpHandler}\n                onMouseLeave={mouseLeaveHandler}\n            />\n            {showValue ? (\n              <span className=\"knob__value\">{knobValue}{unit}</span>\n            ) :\n                knobName.length === 1 ? (\n                  <span className=\"knob__specialchar\">{knobName}</span>\n                ) : (\n                  <span className=\"knob__name\">{knobName}</span>\n                )\n            }\n        </div>\n    )\n}\n\nexport default Knob;\n","// https://docs.google.com/spreadsheets/d/1zSqASppyuRqORSJSe24vLB0m9WUAfTefJKiqrHjrkXg/edit#gid=0\nexport function valueToDegree(\n  value: number,\n  minValue: number,\n  maxValue: number,\n  startDegree: number,\n  maxRotation: number\n): number {\n  return (((value * maxRotation) / (maxValue - minValue)) + startDegree);\n}\n","import { useEffect, useState, useCallback, useMemo } from 'react';\nimport { noteStore } from \"./store/store\";\nimport Keyboard from \"./component/keyboard/Keyboard\";\nimport Knob from \"./component/knob/Knob\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [octave, setOctave] = useState(5);\n  const [mainVolume, setMainVolume] = useState(0.05);\n  const [noiseVolume, setNoiseVolume] = useState(1);\n  const [sineVolume, setSineVolume] = useState(1);\n  const [squareVolume, setSquareVolume] = useState(1)\n  const [filterFreq, setFilterFreq] = useState(5000); // from 30hz to 25000hz\n\n  const {audioContext, primaryFilter} = useMemo(() => {\n    const audioContext = new AudioContext();\n\n    // Create a Gain control (Master Volume)\n    const primaryGainControl = audioContext.createGain();\n    primaryGainControl.gain.setValueAtTime(mainVolume, 0);\n    primaryGainControl.connect(audioContext.destination);\n\n    // Create a filter (LP)\n    const primaryFilter = audioContext.createBiquadFilter();\n    primaryFilter.type = \"lowpass\";\n    primaryFilter.frequency.value = filterFreq;\n    primaryFilter.connect(primaryGainControl);\n\n    // Create all notes\n    noteStore.createAllNotes({ audioContext, primaryFilter, sineVolume, squareVolume, noiseVolume });\n\n    return {audioContext, primaryFilter};\n  }, []);\n\n  useEffect(() => {\n    // Update FilterFrequence\n    primaryFilter.frequency.value = Math.round(filterFreq);\n  }, [filterFreq])\n\n  const playNoteHandler = useCallback((freq: number) => {\n\n    audioContext.resume();\n\n    const noteArray = noteStore.notes.find(note => note.freq == freq);\n    if (noteArray) {\n      const noteGain = noteArray.noteGain;\n      noteGain.gain.setValueAtTime(1, 0);\n    }\n  }, [noteStore.notes, audioContext]);\n\n  const stopNoteHandler = useCallback((freq: number) => {\n    const noteArray = noteStore.notes.find(note => note.freq == freq);\n    if (noteArray) {\n      const noteGain = noteArray.noteGain;\n      noteGain.gain.setValueAtTime(noteGain.gain.value, audioContext.currentTime);\n      noteGain.gain.exponentialRampToValueAtTime(0.000001, audioContext.currentTime + 0.03);\n    }\n  }, [noteStore.notes, audioContext]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p> </p>\n        <div>\n          <Knob value={mainVolume} valueSetter={setMainVolume} knobName=\"vol\" min={0} max={0.1} multiply={1000} unit=\"%\" />\n          <Knob value={noiseVolume} valueSetter={setNoiseVolume} knobName=\"noise\" min={0.01} max={1} multiply={100} unit=\"%\" />\n          <Knob value={sineVolume} valueSetter={setSineVolume} knobName=\"sin\" min={0.01} max={1} multiply={100} unit=\"%\" />\n          <Knob value={squareVolume} valueSetter={setSquareVolume} knobName=\"square\" min={0.01} max={1} multiply={100} unit=\"%\" />\n          <Knob value={filterFreq} valueSetter={setFilterFreq} knobName=\"filter\" min={30} max={20000} multiply={1} unit=\"hz\" />\n        </div>\n        <Keyboard\n          playNoteHandler={playNoteHandler}\n          stopNoteHandler={stopNoteHandler}\n          octave={octave}\n        />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}